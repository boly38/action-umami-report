import t from"axios";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(t[i]=s[i])}return t},e.apply(this,arguments)}const s=["1h","1hour","60min","60minutes"],i=["1d","1day","24h","24hours"],a=["7d","7days","1w","1week"],n=["31d","31days","1m","1month"],r=(t="24h")=>{let e;if(s.includes(t))e=36e5;else if(i.includes(t))e=864e5;else if(a.includes(t))e=6048e5;else{if(!n.includes(t))throw`Unexpected period provided. Accepted values are : ${[...s,...i,...a,...n]}`;e=26784e5}return{start_at:Date.now()-e,end_at:Date.now()}},o="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:102.0) Gecko/20100101 Firefox/102.0";function h(t,e,s){return s||(s="None specified"),s=JSON.stringify(s),e||(e="None specified"),e=e.toString(),new Error(`${t}\nOptions: ${s}\nStacktrace:${e}\n`)}class c{constructor(t,e){this.t=void 0,this.website_id=void 0,this.website_uuid=void 0,this.user_id=void 0,this.name=void 0,this.domain=void 0,this.share_id=void 0,this.created_at=void 0,this.t=t,Object.assign(this,e)}async update(t){const e=await this.t.updateWebsite(this.website_id,t);return Object.assign(this,e),this}async reset(){return await this.t.resetWebsite(this.website_id),this}async delete(){await this.t.deleteWebsite(this.website_id)}async getStats(t){return await this.t.getStats(this.website_id,t)}async getPageviews(t){return await this.t.getPageviews(this.website_id,t)}async getEvents(t){return await this.t.getEvents(this.website_id,t)}async getEventsByName(t,e){return await this.t.getEventsByName(this.website_id,t,e)}async getMetrics(t){return await this.t.getMetrics(this.website_id,t)}async getActiveVisitors(){return await this.t.getActiveVisitors(this.website_id)}}class u{constructor(t,e){this.t=void 0,this.user_id=void 0,this.username=void 0,this.is_admin=void 0,this.created_at=void 0,this.updated_at=void 0,this.t=t,Object.assign(this,e)}async update(t){const e=await this.t.updateAccount(this.user_id,t);return Object.assign(this,e),this}async changePassword(t){return await this.t.changePassword(this.user_id,t),this}async deleteAccount(){await this.t.deleteAccount(this.user_id)}}class d{setDefaultPeriod(t){this.i=t}setDefaultUnit(t){this.o=t}setDefaultTZ(t){this.h=t}setDefaultMetricType(t){this.u=t}setDefaultUserAgent(t){this.l=t}async getCurrentUser(){return(await this.v).data.user}constructor(e,s,i,a){if(this.p=void 0,this.v=void 0,this.g=void 0,this._=Date.now(),this.i="24h",this.o="hour",this.h="America/Toronto",this.u="url",this.l=o,!e)throw new Error("A server hostname is required");if(e=e.replace(/https?:\/\//,"").replace(/\/$/,""),!s||!i)throw new Error("A username and a password are required");this.g=a,this.p=t.create({baseURL:`https://${e}/api`,timeout:1e3}),this.p.interceptors.request.use(this.m.bind(this)),this.v=this.p.post("/auth/login",{username:s,password:i}).catch(t=>{throw h("Login failed",t,{server:e,username:s})})}async m(t){if("/auth/login"==t.url||"/collect"==t.url)return t;const s=await this.v;if(t.headers=e({},t.headers,{Authorization:`Bearer ${s.data.token}`}),"/auth/verify"==t.url)return t;if(this._+36e5<Date.now()){this._=Date.now();try{await this.p.get("/auth/verify")}catch(e){throw h("Could not verify authentication",e,{axiosConfig:t})}}return t}async collect(t,e,s=this.l){try{if(!s)throw new Error("A user agent is required. See https://umami.is/docs/api");const{data:i}=await this.p.post("/collect",{type:t,payload:e},{headers:{"User-Agent":s}});return i}catch(i){throw h("Could not collect",i,{type:t,payload:e,userAgent:s})}}static async collect(e,s,i,a=o){e=e.replace(/https?:\/\//,"").replace(/\/$/,"");try{if(!a)throw new Error("A user agent is required. See https://umami.is/docs/api");const{data:n}=await t.post(`https://${e}/api/collect`,{type:s,payload:i},{headers:{"User-Agent":a}});return n}catch(t){throw h("Could not collect",t,{type:s,payload:i,userAgent:a})}}async createWebsite(t){try{const{data:e}=await this.p.post("/website",t);return this.g?new c(this,e):e}catch(e){throw h("Could not create website",e,{options:t})}}async updateWebsite(t,s){try{const{data:i}=await this.p.post("/website",e({website_id:t},s));return this.g?new c(this,i):i}catch(e){throw h("Could not update website",e,{website_id:t,options:s})}}async getWebsite(t=null){try{if(null==t){const t=await this.getWebsites();return this.g?new c(this,t[0]):t[0]}const{data:e}=await this.p.get(`/website/${t}`);return this.g?new c(this,e):e}catch(e){throw h("Could not get website",e,{website_id:t})}}async getWebsiteBy(t,e){if("share_id"==t)try{const{data:t}=await this.p.get(`/share/${e}`),s=await this.getWebsite(t.websiteId);return this.g?new c(this,s):s}catch(s){throw h("Could not find website",s,{key:t,value:e})}if("website_id"==t)try{const t=await this.getWebsite(e);return this.g?new c(this,t):t}catch(s){throw h("Could not find website",s,{key:t,value:e})}const s=(await this.getWebsites()).find(s=>s[t]==e);if(!s)throw h("Could not find website",null,{key:t,value:e});return this.g?new c(this,s):s}async resetWebsite(t){try{const{data:e}=await this.p.post(`/website/${t}/reset`);return this.g?new c(this,e):e}catch(e){throw h("Could not reset website",e,{website_id:t})}}async deleteWebsite(t){try{await this.p.delete(`/website/${t}`)}catch(e){throw h("Could not delete website",e,{website_id:t})}}async getWebsites(t){try{const{data:e}=await this.p.get("/websites",{params:t});return this.g?e.map(t=>new c(this,t)):e}catch(e){throw h("Could not get websites",e,{options:t})}}async getStats(t,s){var i;const{start_at:a,end_at:n}=r(null!=(i=null==s?void 0:s.period)?i:this.i),o=e({},s,{start_at:a,end_at:n});try{const{data:e}=await this.p.get(`/website/${t}/stats`,{params:o});return e}catch(e){throw h("Could not get stats",e,{website_id:t,params:o})}}async getPageviews(t,s){var i,a,n;const{start_at:o,end_at:c}=r(null!=(i=null==s?void 0:s.period)?i:this.i),u=e({},s,{start_at:o,end_at:c,unit:null!=(a=null==s?void 0:s.unit)?a:this.o,tz:null!=(n=null==s?void 0:s.tz)?n:this.h});try{const{data:e}=await this.p.get(`/website/${t}/pageviews`,{params:u});return e}catch(e){throw h("Could not get pageviews",e,{website_id:t,params:u})}}async getEvents(t,e){var s,i,a;const{start_at:n,end_at:o}=r(null!=(s=null==e?void 0:e.period)?s:this.i),c={start_at:n,end_at:o,unit:null!=(i=null==e?void 0:e.unit)?i:this.o,tz:null!=(a=null==e?void 0:e.tz)?a:this.h,url:null==e?void 0:e.url,event_type:null==e?void 0:e.event_type};try{const{data:e}=await this.p.get(`/website/${t}/events`,{params:c});return e}catch(e){throw h("Could not get events",e,{website_id:t,params:c})}}async getEventsByName(t,e,s){try{return(await this.getEvents(t,{period:null==s?void 0:s.period,unit:null==s?void 0:s.unit,tz:null==s?void 0:s.tz,url:null==s?void 0:s.url,event_type:null==s?void 0:s.event_type})).filter(t=>t.x==e)}catch(e){throw h("Could not get events by name",e,{website_id:t,options:s})}}async getMetrics(t,s){var i,a;const{start_at:n,end_at:o}=r(null!=(i=null==s?void 0:s.period)?i:this.i),c=e({},s,{start_at:n,end_at:o,type:null!=(a=null==s?void 0:s.type)?a:this.u});try{const{data:e}=await this.p.get(`/website/${t}/metrics`,{params:c});return e}catch(e){throw h("Could not get metrics",e,{website_id:t,params:c})}}async getActiveVisitors(t){try{const{data:e}=await this.p.get(`/website/${t}/active`);return e}catch(e){throw h("Could not get active visitors",e,{website_id:t})}}async createAccount(t){try{const{data:e}=await this.p.post("/account",t);return this.g?new u(this,e):e}catch(e){throw h("Could not create account",e,{options:t})}}async updateAccount(t,s){try{const{data:i}=await this.p.post("/account",e({user_id:t},s));return this.g?new u(this,i):i}catch(e){throw h("Could not update account",e,{user_id:t,options:s})}}async changePassword(t,s){try{const{data:i}=await this.p.post("/password",e({user_id:t},s));return this.g?new u(this,i):i}catch(e){throw h("Could not update password",e,{user_id:t,options:s})}}async getAccounts(){try{const{data:t}=await this.p.get("/accounts");return this.g?t.map(t=>new u(this,t)):t}catch(t){throw h("Could not get accounts",t)}}async getAccount(t){try{const{data:e}=await this.p.get(`/account/${t}`);return this.g?new u(this,e):e}catch(e){throw h("Could not get account",e,{user_id:t})}}async deleteAccount(t){try{await this.p.delete(`/account/${t}`)}catch(e){throw h("Could not delete account",e,{user_id:t})}}}export{d as default};
//# sourceMappingURL=index.modern.js.map
