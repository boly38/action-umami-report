import t from"axios";function s(){return s=Object.assign?Object.assign.bind():function(t){for(var s=1;s<arguments.length;s++){var e=arguments[s];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])}return t},s.apply(this,arguments)}const e=["1h","1hour","60min","60minutes"],i=["1d","1day","24h","24hours"],a=["7d","7days","1w","1week"],n=["31d","31days","1m","1month"],r=(t="24h")=>{let s;if(e.includes(t))s=36e5;else if(i.includes(t))s=864e5;else if(a.includes(t))s=6048e5;else{if(!n.includes(t))throw`Unexpected period provided. Accepted values are : ${[...e,...i,...a,...n]}`;s=26784e5}return{start_at:Date.now()-s,end_at:Date.now()}},o="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:102.0) Gecko/20100101 Firefox/102.0";function h(t,s,e){return e||(e="None specified"),e=JSON.stringify(e),s||(s="None specified"),s=s.toString(),new Error(`${t}\nOptions: ${e}\nStacktrace:${s}\n`)}class c{constructor(t,s){this.t=void 0,this.id=void 0,this.websiteUuid=void 0,this.userId=void 0,this.name=void 0,this.domain=void 0,this.shareId=void 0,this.createdAt=void 0,this.t=t,Object.assign(this,s)}async update(t){const s=await this.t.updateWebsite(this.websiteUuid,t);return Object.assign(this,s),this}async reset(){return await this.t.resetWebsite(this.websiteUuid),this}async delete(){await this.t.deleteWebsite(this.websiteUuid)}async getStats(t){return await this.t.getStats(this.websiteUuid,t)}async getPageviews(t){return await this.t.getPageviews(this.websiteUuid,t)}async getEvents(t){return await this.t.getEvents(this.websiteUuid,t)}async getMetrics(t){return await this.t.getMetrics(this.websiteUuid,t)}async getActiveVisitors(){return await this.t.getActiveVisitors(this.websiteUuid)}}class u{constructor(t,s){this.t=void 0,this.id=void 0,this.username=void 0,this.isAdmin=void 0,this.createdAt=void 0,this.updatedAt=void 0,this.accountUuid=void 0,this.t=t,Object.assign(this,s)}async update(t){const s=await this.t.updateAccount(this.id,t);return Object.assign(this,s),this}async changePassword(t){return await this.t.changePassword(this.accountUuid,t),this}async deleteAccount(){await this.t.deleteAccount(this.id)}}class d{setDefaultPeriod(t){this.i=t}setDefaultUnit(t){this.o=t}setDefaultTZ(t){this.h=t}setDefaultMetricType(t){this.u=t}setDefaultUserAgent(t){this.l=t}async getCurrentUser(){return(await this.v).data.user}constructor(s,e,i,a){if(this.p=void 0,this.v=void 0,this.g=void 0,this.m=Date.now(),this.i="24h",this.o="hour",this.h="America/Toronto",this.u="url",this.l=o,!s)throw new Error("A server hostname is required");if(s=s.replace(/https?:\/\//,"").replace(/\/$/,""),!e||!i)throw new Error("A username and a password are required");this.g=a,this.p=t.create({baseURL:`https://${s}/api`,timeout:this.getClientTimeoutMs()}),this.p.interceptors.request.use(this.C.bind(this)),this.v=this.p.post("/auth/login",{username:e,password:i}).catch(t=>{throw h("Login failed",t,{server:s,username:e})})}getClientTimeoutMs(){const t=parseInt(process.env.UMAMI_CLIENT_TIMEOUT_MS||2e3.toString());return t<100||t>6e4?2e3:t}async C(t){if("/auth/login"==t.url||"/collect"==t.url)return t;const e=await this.v;if(t.headers=s({},t.headers,{Authorization:`Bearer ${e.data.token}`}),"/auth/verify"==t.url)return t;if(this.m+36e5<Date.now()){this.m=Date.now();try{await this.p.get("/auth/verify")}catch(s){throw h("Could not verify authentication",s,{axiosConfig:t})}}return t}async collect(t,s,e=this.l){try{if(!e)throw new Error("A user agent is required. See https://umami.is/docs/api");const{data:i}=await this.p.post("/collect",{type:t,payload:s},{headers:{"User-Agent":e}});return i}catch(i){throw h("Could not collect",i,{type:t,payload:s,userAgent:e})}}static async collect(s,e,i,a=o){s=s.replace(/https?:\/\//,"").replace(/\/$/,"");try{if(!a)throw new Error("A user agent is required. See https://umami.is/docs/api");const{data:n}=await t.post(`https://${s}/api/collect`,{type:e,payload:i},{headers:{"User-Agent":a}});return n}catch(t){throw h("Could not collect",t,{type:e,payload:i,userAgent:a})}}async createWebsite(t){try{t.owner||(t=s({},t,{owner:(await this.getCurrentUser()).userId}));const{data:e}=await this.p.post("/websites",t);return this.g?new c(this,e):e}catch(s){throw h("Could not create website",s,{options:t})}}async updateWebsite(t,e){try{e.owner||(e=s({},e,{owner:(await this.getCurrentUser()).userId}));const{data:i}=await this.p.post(`/websites/${t}`,e);return this.g?new c(this,i):i}catch(s){throw h("Could not update website",s,{websiteUuid:t,options:e})}}async getWebsite(t=null){try{if(null==t){const t=await this.getWebsites();return this.g?new c(this,t[0]):t[0]}const{data:s}=await this.p.get(`/websites/${t}`);return this.g?new c(this,s):s}catch(s){throw h("Could not get website",s,{websiteUuid:t})}}async getWebsiteBy(t,s){if("shareId"==t)try{const{data:t}=await this.p.get(`/share/${s}`),e=await this.getWebsite(t.websiteId);return this.g?new c(this,e):e}catch(e){throw h("Could not find website",e,{key:t,value:s})}if("websiteUuid"==t)try{const t=await this.getWebsite(s);return this.g?new c(this,t):t}catch(e){throw h("Could not find website",e,{key:t,value:s})}const e=(await this.getWebsites()).find(e=>e[t]==s);if(!e)throw h("Could not find website",null,{key:t,value:s});return this.g?new c(this,e):e}async resetWebsite(t){try{const{data:s}=await this.p.post(`/websites/${t}/reset`);return this.g?new c(this,s):s}catch(s){throw h("Could not reset website",s,{websiteUuid:t})}}async deleteWebsite(t){try{await this.p.delete(`/websites/${t}`)}catch(s){throw h("Could not delete website",s,{websiteUuid:t})}}async getWebsites(t){try{const{data:s}=await this.p.get("/websites",{params:t});return this.g?s.map(t=>new c(this,t)):s}catch(s){throw h("Could not get websites",s,{options:t})}}async getStats(t,e){var i;const{start_at:a,end_at:n}=r(null!=(i=null==e?void 0:e.period)?i:this.i),o=s({},e,{start_at:a,end_at:n});try{const{data:s}=await this.p.get(`/websites/${t}/stats`,{params:o});return s}catch(s){throw h("Could not get stats",s,{websiteUuid:t,params:o})}}async getPageviews(t,e){var i,a,n;const{start_at:o,end_at:c}=r(null!=(i=null==e?void 0:e.period)?i:this.i),u=s({},e,{start_at:o,end_at:c,unit:null!=(a=null==e?void 0:e.unit)?a:this.o,tz:null!=(n=null==e?void 0:e.tz)?n:this.h});try{const{data:s}=await this.p.get(`/websites/${t}/pageviews`,{params:u});return s}catch(s){throw h("Could not get pageviews",s,{websiteUuid:t,params:u})}}async getEvents(t,s){var e,i,a;const{start_at:n,end_at:o}=r(null!=(e=null==s?void 0:s.period)?e:this.i),c={start_at:n,end_at:o,unit:null!=(i=null==s?void 0:s.unit)?i:this.o,tz:null!=(a=null==s?void 0:s.tz)?a:this.h,url:null==s?void 0:s.url,event_name:null==s?void 0:s.event_name};try{const{data:s}=await this.p.get(`/websites/${t}/events`,{params:c});return s}catch(s){throw h("Could not get events",s,{websiteUuid:t,params:c})}}async getMetrics(t,e){var i,a;const{start_at:n,end_at:o}=r(null!=(i=null==e?void 0:e.period)?i:this.i),c=s({},e,{start_at:n,end_at:o,type:null!=(a=null==e?void 0:e.type)?a:this.u});try{const{data:s}=await this.p.get(`/websites/${t}/metrics`,{params:c});return s}catch(s){throw h("Could not get metrics",s,{websiteUuid:t,params:c})}}async getActiveVisitors(t){try{const{data:s}=await this.p.get(`/websites/${t}/active`);return s}catch(s){throw h("Could not get active visitors",s,{websiteUuid:t})}}async createAccount(t){try{const{data:s}=await this.p.post("/accounts",t);return this.g?new u(this,s):s}catch(s){throw h("Could not create account",s,{options:t})}}async updateAccount(t,s){try{const{data:e}=await this.p.post(`/accounts/${t}`,s);return this.g?new u(this,e):e}catch(e){throw h("Could not update account",e,{userId:t,options:s})}}async changePassword(t,s){try{const{data:e}=await this.p.post(`/accounts/${t}/password`,s);return this.g?new u(this,e):e}catch(e){throw h("Could not update password",e,{accountUuid:t,options:s})}}async getAccounts(){try{const{data:t}=await this.p.get("/accounts");return this.g?t.map(t=>new u(this,t)):t}catch(t){throw h("Could not get accounts",t)}}async getAccount(t){try{const{data:s}=await this.p.get(`/accounts/${t}`);return this.g?new u(this,s):s}catch(s){throw h("Could not get account",s,{userId:t})}}async deleteAccount(t){try{await this.p.delete(`/accounts/${t}`)}catch(s){throw h("Could not delete account",s,{userId:t})}}}export{d as default};
//# sourceMappingURL=index.modern.js.map
