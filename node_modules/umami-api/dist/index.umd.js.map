{"version":3,"file":"index.umd.js","sources":["../src/utils/time-periods.ts","../src/UmamiAPIClient.ts"],"sourcesContent":["const HOUR_PERIODS = [\"1h\", \"1hour\", \"60min\", \"60minutes\"] as const;\ntype THourPeriod = typeof HOUR_PERIODS[number];\nconst DAY_PERIODS = [\"1d\", \"1day\", \"24h\", \"24hours\"] as const;\ntype TDayPeriod = typeof DAY_PERIODS[number];\nconst WEEK_PERIODS = [\"7d\", \"7days\", \"1w\", \"1week\"] as const;\ntype TWeekPeriod = typeof WEEK_PERIODS[number];\nconst MONTH_PERIODS = [\"31d\", \"31days\", \"1m\", \"1month\"] as const;\ntype TMonthPeriod = typeof MONTH_PERIODS[number];\nexport type TTimePeriod = THourPeriod | TDayPeriod | TWeekPeriod | TMonthPeriod;\n\nexport const convertPeriodToTime = (period: TTimePeriod = \"24h\") => {\n\tlet delta: number;\n\tif (HOUR_PERIODS.includes(period as THourPeriod)) {\n\t\tdelta = 60 * 60 * 1000;\n\t} else if (DAY_PERIODS.includes(period as TDayPeriod)) {\n\t\tdelta = 24 * 60 * 60 * 1000;\n\t} else if (WEEK_PERIODS.includes(period as TWeekPeriod)) {\n\t\tdelta = 7 * 24 * 60 * 60 * 1000;\n\t} else if (MONTH_PERIODS.includes(period as TMonthPeriod)) {\n\t\tdelta = 31 * 24 * 60 * 60 * 1000;\n\t} else {\n\t\tthrow `Unexpected period provided. Accepted values are : ${[\n\t\t\t...HOUR_PERIODS,\n\t\t\t...DAY_PERIODS,\n\t\t\t...WEEK_PERIODS,\n\t\t\t...MONTH_PERIODS,\n\t\t]}`;\n\t}\n\treturn {\n\t\tstart_at: Date.now() - delta,\n\t\tend_at: Date.now(),\n\t};\n};\n","import type { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport type { TTimePeriod } from \"./utils/time-periods\";\nimport axios from \"axios\";\nimport { convertPeriodToTime } from \"./utils/time-periods\";\n\nconst DEFAULT_HTTP_CLIENT_TIMEOUT_MS = 2000;\n\nconst DEFAULT_USER_AGENT =\n\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:102.0) Gecko/20100101 Firefox/102.0\";\n\ntype TUnit = \"year\" | \"month\" | \"day\" | \"hour\";\ntype TMetricType =\n\t| \"url\"\n\t| \"referrer\"\n\t| \"browser\"\n\t| \"os\"\n\t| \"device\"\n\t| \"country\"\n\t| \"event\"\n\t| \"language\"\n\t| \"utm_source\"\n\t| \"utm_medium\"\n\t| \"utm_campaign\"\n\t| \"utm_content\"\n\t| \"utm_term\"\n\t| \"ref\";\n\ninterface IAuthData {\n\ttoken: string;\n\tuser: {\n\t\tuserId: number;\n\t\tusername: string;\n\t\tisAdmin: boolean;\n\t\taccountUuid: string;\n\t\tiat?: number;\n\t\tshareToken?: string;\n\t};\n}\n\ninterface ITrackedWebsite {\n\tid: number;\n\twebsiteUuid: string;\n\tuserId: number;\n\tname: string;\n\tdomain: string;\n\tshareId: string | null;\n\tcreatedAt: string;\n}\n\ninterface IStats {\n\tpageviews: { value: number; change: number };\n\tuniques: { value: number; change: number };\n\tbounces: { value: number; change: number };\n\ttotaltime: { value: number; change: number };\n}\n\ninterface IPageViews {\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of page views in the time period\n\t */\n\tpageviews: { t: string; y: number }[];\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of sessions in the time period\n\t */\n\tsessions: { t: string; y: number }[];\n}\n\n/**\n * @param x The name of the event\n * @param t The time period of the data\n * @param y The amount of events in the time period\n */\ninterface IEvent {\n\tx: string;\n\tt: string;\n\ty: number;\n}\n\n/**\n * @param x The metric's value\n * @param y The amount of this metric's value in the period of time\n */\ninterface IMetric {\n\tx: string | null;\n\ty: number;\n}\n\ninterface IActiveVisitor {\n\tx: number;\n}\n\ninterface IUserAccount {\n\tid: number;\n\tusername: string;\n\tisAdmin: boolean;\n\tcreatedAt: string;\n\tupdatedAt: string;\n\taccountUuid: string;\n}\n\ninterface IPageViewPayload {\n\twebsite: string;\n\turl: string;\n\treferrer?: string;\n\thostname: string;\n\tlanguage?: string;\n\tscreen?: string;\n}\n\ninterface IEventPayload extends IPageViewPayload {\n\tevent_name: string;\n\tevent_data: string;\n}\n\nfunction _richError(message: string, cause?: any, options?: any): Error {\n\tif (!options) options = \"None specified\";\n\toptions = JSON.stringify(options);\n\n\tif (!cause) cause = \"None specified\";\n\tcause = cause.toString();\n\n\treturn new Error(`${message}\\nOptions: ${options}\\nStacktrace:${cause}\\n`);\n}\n\nclass TrackedWebsite<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly id: number;\n\tpublic readonly websiteUuid: string;\n\tpublic userId: number;\n\tpublic name: string;\n\tpublic domain: string;\n\tpublic shareId: string | null;\n\tpublic createdAt: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: ITrackedWebsite) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates the website.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.owner The website's owner's ID (by default, the logged-in's user's)\n\t * @param options.enableShareUrl Whether or not to enable public sharing.\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L23-L57 Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\towner?: number;\n\t\tenableShareUrl?: boolean;\n\t}): Promise<TrackedWebsite<A>> {\n\t\tconst data = await this._apiClient.updateWebsite(this.websiteUuid, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets the website's stats\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async reset(): Promise<TrackedWebsite<A>> {\n\t\tawait this._apiClient.resetWebsite(this.websiteUuid);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L59-L67 Relevant Umami source code}\n\t */\n\tpublic async delete(): Promise<void> {\n\t\tawait this._apiClient.deleteWebsite(this.websiteUuid);\n\t}\n\n\t/**\n\t * Gets the stats of the website from a specified time period\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(options?: {\n\t\tperiod?: TTimePeriod;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IStats> {\n\t\treturn await this._apiClient.getStats(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets the pageviews of the website from a specified time period\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IPageViews> {\n\t\treturn await this._apiClient.getPageviews(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets the events of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\tevent_type?: string;\n\t}): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEvents(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets a type of metrics of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(options?: {\n\t\tperiod?: TTimePeriod;\n\t\ttype?: TMetricType;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IMetric[]> {\n\t\treturn await this._apiClient.getMetrics(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(): Promise<IActiveVisitor[]> {\n\t\treturn await this._apiClient.getActiveVisitors(this.websiteUuid);\n\t}\n}\n\nclass UserAccount<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly id: number;\n\tpublic username: string;\n\tpublic isAdmin: boolean;\n\tpublic readonly createdAt: string;\n\tpublic updatedAt: string;\n\tpublic accountUuid: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: IUserAccount) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L21-L53 Relevant Umami source code}\n\t */\n\tpublic async update(options: { username: string; password: string }): Promise<UserAccount<A>> {\n\t\tconst data = await this._apiClient.updateAccount(this.id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(options: {\n\t\tcurrent_password: string;\n\t\tnew_password: string;\n\t}): Promise<UserAccount<A>> {\n\t\tawait this._apiClient.changePassword(this.accountUuid, options);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the user account (admin only)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L55-L63 Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(): Promise<void> {\n\t\tawait this._apiClient.deleteAccount(this.id);\n\t}\n}\n\n/**\n * Umami API Client\n */\nexport default class UmamiAPIClient<A extends boolean> {\n\tprivate readonly _axios: AxiosInstance;\n\tprivate readonly _auth: Promise<AxiosResponse<IAuthData>>;\n\tprivate readonly _returnClasses: A;\n\tprivate _lastAuthCheck: number = Date.now();\n\tprivate _defaultPeriod: TTimePeriod = \"24h\";\n\tprivate _defaultUnit: TUnit = \"hour\";\n\tprivate _defaultTZ = \"America/Toronto\";\n\tprivate _defaultMetricType: TMetricType = \"url\";\n\tprivate _defaultUserAgent: string = DEFAULT_USER_AGENT;\n\n\tpublic setDefaultPeriod(period: TTimePeriod): void {\n\t\tthis._defaultPeriod = period;\n\t}\n\n\tpublic setDefaultUnit(unit: TUnit): void {\n\t\tthis._defaultUnit = unit;\n\t}\n\n\tpublic setDefaultTZ(tz: string): void {\n\t\tthis._defaultTZ = tz;\n\t}\n\n\tpublic setDefaultMetricType(metricType: TMetricType): void {\n\t\tthis._defaultMetricType = metricType;\n\t}\n\n\tpublic setDefaultUserAgent(userAgent: string): void {\n\t\tthis._defaultUserAgent = userAgent;\n\t}\n\n\tpublic async getCurrentUser(): Promise<IAuthData[\"user\"]> {\n\t\treturn (await this._auth).data.user;\n\t}\n\n\t/**\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param username Username of the user you want to login\n\t * @param password Password of the user you want to login\n\t * @param returnClasses Return classes instead of plain-old JavaScript objects when getting websites or accounts.\n\t * @returns An authenticated class instance\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/auth/login.js Relevant Umami source code}\n\t */\n\tconstructor(server: string, username: string, password: string, returnClasses: A) {\n\t\tif (!server) throw new Error(\"A server hostname is required\");\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\t\tif (!username || !password) throw new Error(\"A username and a password are required\");\n\n\t\tthis._returnClasses = returnClasses;\n\t\tthis._axios = axios.create({\n\t\t\tbaseURL: `https://${server}/api`,\n\t\t\ttimeout: this.getClientTimeoutMs(),\n\t\t});\n\n\t\tthis._axios.interceptors.request.use(this._verifyAuth.bind(this));\n\n\t\tthis._auth = this._axios.post(\"/auth/login\", { username, password }).catch((error) => {\n\t\t\tthrow _richError(\"Login failed\", error, { server, username });\n\t\t});\n\t}\n\n\tprivate getClientTimeoutMs() {\n\t\tconst timeout: number = parseInt(\n\t\t\tprocess.env.UMAMI_CLIENT_TIMEOUT_MS || DEFAULT_HTTP_CLIENT_TIMEOUT_MS.toString()\n\t\t);\n\t\treturn timeout < 100 || timeout > 60000 ? DEFAULT_HTTP_CLIENT_TIMEOUT_MS : timeout;\n\t}\n\n\tprivate async _verifyAuth(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\n\t\tif (config.url == \"/auth/login\" || config.url == \"/collect\") return config;\n\n\t\tconst auth = await this._auth;\n\n\t\tconfig.headers = { ...config.headers, Authorization: `Bearer ${auth.data.token}` };\n\n\t\tif (config.url == \"/auth/verify\") return config;\n\n\t\tif (this._lastAuthCheck + 60 * 60 * 1000 < Date.now()) {\n\t\t\tthis._lastAuthCheck = Date.now();\n\n\t\t\ttry {\n\t\t\t\tawait this._axios.get(\"/auth/verify\");\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not verify authentication\", error, { axiosConfig: config });\n\t\t\t}\n\t\t}\n\n\t\treturn config;\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic async collect(\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic async collect(type: \"event\", payload: IEventPayload, userAgent?: string): Promise<string>;\n\tpublic async collect(\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = this._defaultUserAgent\n\t): Promise<string> {\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await this._axios.post(\n\t\t\t\t\"/collect\",\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"event\",\n\t\tpayload: IEventPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = DEFAULT_USER_AGENT\n\t): Promise<string> {\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t`https://${server}/api/collect`,\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new website and returns its information.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.owner The website's owner's ID (by default, the logged-in's user's)\n\t * @param options.enableShareUrl Whether or not to enable public sharing.\n\t * @returns The new website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js#L33-L47 Relevant Umami source code}\n\t */\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\towner?: number;\n\t\tenableShareUrl?: boolean;\n\t}): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\towner?: number;\n\t\tenableShareUrl?: boolean;\n\t}): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (!options.owner) {\n\t\t\t\tconst currentUser = await this.getCurrentUser();\n\t\t\t\toptions = {\n\t\t\t\t\t...options,\n\t\t\t\t\towner: currentUser.userId,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst { data } = await this._axios.post(\"/websites\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create website\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a website and returns its information.\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.owner The website's owner's ID (by default, the logged-in's user's)\n\t * @param options.enableShareUrl Whether or not to enable public sharing.\n\t * @returns The website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L23-L57 Relevant Umami source code}\n\t */\n\tpublic async updateWebsite(\n\t\twebsiteUuid: string,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\towner?: number;\n\t\t\tenableShareUrl?: boolean;\n\t\t}\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async updateWebsite(\n\t\twebsiteUuid: string,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\towner?: number;\n\t\t\tenableShareUrl?: boolean;\n\t\t}\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (!options.owner) {\n\t\t\t\tconst currentUser = await this.getCurrentUser();\n\t\t\t\toptions = {\n\t\t\t\t\t...options,\n\t\t\t\t\towner: currentUser.userId,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst { data } = await this._axios.post(`/websites/${websiteUuid}`, options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update website\", error, { websiteUuid, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the first website that gets returned by Umami\n\t * @returns The first website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\t/**\n\t * Gets a website by its UUID (not ID)\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(\n\t\twebsiteUuid: string\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsite(\n\t\twebsiteUuid: string = null\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (websiteUuid == null) {\n\t\t\t\tconst websites = await this.getWebsites();\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, websites[0]);\n\t\t\t\t}\n\t\t\t\treturn websites[0];\n\t\t\t}\n\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get website\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a website by a property\n\t * @param key The property to check\n\t * @param value The value to check the property against\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t *\n\t * @example\n\t * Get a website by domain name\n\t * ```ts\n\t * const website = await instance.getWebsiteBy(\"domain\", \"example.com\");\n\t * ```\n\t */\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\tif (key == \"shareId\") {\n\t\t\ttry {\n\t\t\t\tconst { data } = await this._axios.get(`/share/${value}`);\n\t\t\t\tconst website = await this.getWebsite(data.websiteId);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, website);\n\t\t\t\t}\n\t\t\t\treturn website;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tif (key == \"websiteUuid\") {\n\t\t\ttry {\n\t\t\t\tconst data = await this.getWebsite(value as string);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tconst websites = await this.getWebsites();\n\t\tconst website = websites.find((website) => website[key] == value);\n\t\tif (!website) {\n\t\t\tthrow _richError(\"Could not find website\", null, { key, value });\n\t\t}\n\t\tif (this._returnClasses) {\n\t\t\treturn new TrackedWebsite(this, website);\n\t\t}\n\t\treturn website;\n\t}\n\n\t/**\n\t * Resets a website's stats\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async resetWebsite(\n\t\twebsiteUuid: string\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async resetWebsite(websiteUuid: string): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/websites/${websiteUuid}/reset`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not reset website\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a website\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L59-L67 Relevant Umami source code}\n\t */\n\tpublic async deleteWebsite(websiteUuid: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/websites/${websiteUuid}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete website\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/**\n\t * Gets tracked websites\n\t * @param options.include_all Whether or not to include all websites (admin only)\n\t * @param options.user_id The user to query websites from (admin only, if not your own user id)\n\t * @returns An array of tracked websites\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js#L20-L31 Relevant Umami source code}\n\t */\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<A extends true ? TrackedWebsite<A>[] : ITrackedWebsite[]>;\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<ITrackedWebsite[] | TrackedWebsite<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/websites\", { params: options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as ITrackedWebsite[]).map((data) => new TrackedWebsite(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get websites\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the stats of a website from a specified time period using it's ID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(\n\t\twebsiteUuid: string,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IStats> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst params = { ...options, start_at, end_at };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/stats`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get stats\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the pageviews of a website from a specified time period using it's ID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(\n\t\twebsiteUuid: string,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\tunit?: TUnit;\n\t\t\ttz?: string;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IPageViews> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = { ...options, start_at, end_at, unit, tz };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/pageviews`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get pageviews\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the events of a website from a specified time period using it's UUID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_name The name of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(\n\t\twebsiteUuid: string,\n\t\toptions?: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_name?: string }\n\t): Promise<IEvent[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = {\n\t\t\tstart_at,\n\t\t\tend_at,\n\t\t\tunit,\n\t\t\ttz,\n\t\t\turl: options?.url,\n\t\t\tevent_name: options?.event_name,\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/events`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a type of metrics of a website from a specified time period using it's ID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(\n\t\twebsiteUuid: string,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\ttype?: TMetricType;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IMetric[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst type = options?.type ?? this._defaultMetricType;\n\t\tconst params = { ...options, start_at, end_at, type };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/metrics`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get metrics\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(websiteUuid: string): Promise<IActiveVisitor[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/active`);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get active visitors\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/*** ADMIN ONLY FUNCTIONS ***/\n\n\t/**\n\t * Creates a user account (admin only)\n\t * @param options.username The username\n\t * @param options.password The password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js#L21-L37 Relevant Umami source code}\n\t */\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/accounts\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create account\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param userId User ID to update\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L21-L53 Relevant Umami source code}\n\t */\n\tpublic async updateAccount(\n\t\tuserId: number,\n\t\toptions: { username: string; password: string }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async updateAccount(\n\t\tuserId: number,\n\t\toptions: { username: string; password: string }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/accounts/${userId}`, options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update account\", error, { userId, options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param accountUuid User UUID to update\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(\n\t\taccountUuid: string,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async changePassword(\n\t\taccountUuid: string,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/accounts/${accountUuid}/password`, options);\n\t\t\treturn this._returnClasses ? new UserAccount(this, data) : data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update password\", error, { accountUuid, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets all the user accounts (admin only)\n\t * @returns An array of all the user accounts\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js#L15-L19 Relevant Umami source code}\n\t */\n\tpublic async getAccounts(): Promise<A extends true ? UserAccount<A>[] : IUserAccount[]>;\n\tpublic async getAccounts(): Promise<IUserAccount[] | UserAccount<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/accounts\");\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as IUserAccount[]).map((data) => new UserAccount(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get accounts\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Gets a user account (admin only)\n\t * @param userId The user ID\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L11-L19 Relevant Umami source code}\n\t */\n\tpublic async getAccount(userId: number): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async getAccount(userId: number): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/accounts/${userId}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get account\", error, { userId });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a user account (admin only)\n\t * @param userId The user ID\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L55-L63 Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(userId: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/accounts/${userId}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete account\", error, { userId });\n\t\t}\n\t}\n}\n"],"names":["DAY_PERIODS","MONTH_PERIODS","convertPeriodToTime","period","delta","HOUR_PERIODS","includes","WEEK_PERIODS","start_at","Date","now","end_at","_catch","body","recover","result","e","then","DEFAULT_USER_AGENT","_richError","message","cause","options","JSON","stringify","toString","TrackedWebsite","apiClient","data","_apiClient","id","this","websiteUuid","userId","name","domain","shareId","createdAt","Object","assign","update","_this2","Promise","resolve","updateWebsite","reset","_this4","resetWebsite","reject","_proto","deleteWebsite","getStats","getPageviews","getEvents","getMetrics","getActiveVisitors","UserAccount","username","isAdmin","updatedAt","accountUuid","UmamiAPIClient","_this18","updateAccount","_proto2","changePassword","_this20","deleteAccount","setDefaultPeriod","server","password","returnClasses","_axios","_auth","_returnClasses","_lastAuthCheck","_defaultPeriod","_defaultUnit","_defaultTZ","_defaultMetricType","_defaultUserAgent","Error","replace","axios","create","baseURL","timeout","getClientTimeoutMs","interceptors","request","use","_verifyAuth","bind","post","error","setDefaultUnit","unit","_proto3","setDefaultTZ","tz","setDefaultMetricType","metricType","setDefaultUserAgent","userAgent","getCurrentUser","_this23$_auth","user","parseInt","process","env","UMAMI_CLIENT_TIMEOUT_MS","config","_this26","url","auth","headers","Authorization","token","get","axiosConfig","_temp","_result2","collect","type","payload","_this28","undefined","createWebsite","_this30","_temp3","_ref3","_temp2","owner","currentUser","_this32","_ref4","_temp4","_extends","_temp5","getWebsite","_exit3","_this34","_temp7","_result3","_ref5","getWebsites","websites","_TrackedWebsite2","_temp6","getWebsiteBy","key","value","_this36","website","find","_TrackedWebsite5","_exit5","_temp13","websiteId","_exit6","_TrackedWebsite6","_this38","_this40","_this42","params","map","_options$period","_this44","_convertPeriodToTime","_options$period2","_options$unit","_options$tz","_this46","_convertPeriodToTime2","_ref10","_options$period3","_this48","_convertPeriodToTime3","_options$unit2","_options$tz2","event_name","_options$period4","_options$type","_this50","_convertPeriodToTime4","_ref12","_this52","_ref13","createAccount","_this54","_ref14","_this56","_this58","getAccounts","_this60","getAccount","_this62","_ref18","_this64"],"mappings":"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"}