import type { TTimePeriod } from "./utils/time-periods";
declare type TUnit = "year" | "month" | "day" | "hour";
declare type TMetricType = "url" | "referrer" | "browser" | "os" | "device" | "country" | "event" | "language" | "utm_source" | "utm_medium" | "utm_campaign" | "utm_content" | "utm_term" | "ref";
interface IAuthData {
    token: string;
    user: {
        user_id: number;
        username: string;
        is_admin: boolean;
        iat?: number;
    };
}
interface ITrackedWebsite {
    website_id: number;
    website_uuid: string;
    user_id: number;
    name: string;
    domain: string;
    share_id: string | null;
    created_at: string;
}
interface IStats {
    pageviews: {
        value: number;
        change: number;
    };
    uniques: {
        value: number;
        change: number;
    };
    bounces: {
        value: number;
        change: number;
    };
    totaltime: {
        value: number;
        change: number;
    };
}
interface IPageViews {
    /**
     * @param t The time period of the data
     * @param y The amount of page views in the time period
     */
    pageviews: {
        t: string;
        y: number;
    }[];
    /**
     * @param t The time period of the data
     * @param y The amount of sessions in the time period
     */
    sessions: {
        t: string;
        y: number;
    }[];
}
/**
 * @param x The name of the event
 * @param t The time period of the data
 * @param y The amount of events in the time period
 */
interface IEvent {
    x: string;
    t: string;
    y: number;
}
/**
 * @param x The metric's value
 * @param y The amount of this metric's value in the period of time
 */
interface IMetric {
    x: string | null;
    y: number;
}
interface IActiveVisitor {
    x: number;
}
interface IUserAccount {
    user_id: number;
    username: string;
    is_admin: boolean;
    created_at: string;
    updated_at: string;
}
interface IPageViewPayload {
    website: string;
    url: string;
    referrer?: string;
    hostname: string;
    language?: string;
    screen?: string;
}
interface IEventPayload extends Omit<IPageViewPayload, "referrer"> {
    event_type: string;
    event_value: string;
}
declare class TrackedWebsite<A extends boolean> {
    private readonly _apiClient;
    readonly website_id: number;
    readonly website_uuid: string;
    user_id: number;
    name: string;
    domain: string;
    share_id: string | null;
    created_at: string;
    constructor(apiClient: UmamiAPIClient<A>, data: ITrackedWebsite);
    /**
     * Updates the website.
     * @param options.domain The domain name of the website (e.g. umami.is)
     * @param options.name The name of the website (usually the same as the domain)
     * @param options.enable_share_url Whether or not to enable public sharing.
     * @returns
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}
     */
    update(options: {
        domain: string;
        name: string;
        enable_share_url?: boolean;
    }): Promise<TrackedWebsite<A>>;
    /**
     * Resets the website's stats
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}
     */
    reset(): Promise<TrackedWebsite<A>>;
    /**
     * Deletes the website
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}
     */
    delete(): Promise<void>;
    /**
     * Gets the stats of the website from a specified time period
     * @param options.period The time period of stats to return
     * @param options.url Filter stats by URL
     * @param options.referrer Filter stats by referrer
     * @param options.os Filter stats by OS
     * @param options.browser Filter stats by browser
     * @param options.device Filter stats by device
     * @param options.country Filter stats by country
     * @returns The website's stats from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}
     */
    getStats(options?: {
        period?: TTimePeriod;
        url?: string;
        referrer?: string;
        os?: string;
        browser?: string;
        device?: string;
        country?: string;
    }): Promise<IStats>;
    /**
     * Gets the pageviews of the website from a specified time period
     * @param options.period The time period of pageviews to return
     * @param options.unit The interval of time/precision of the returned pageviews
     * @param options.tz The timezone you're in (defaults to "America/Toronto")
     * @param options.url Filter pageviews by URL
     * @param options.referrer Filter pageviews by referrer
     * @param options.os Filter pageviews by OS
     * @param options.browser Filter pageviews by browser
     * @param options.device Filter pageviews by device
     * @param options.country Filter pageviews by country
     * @returns The website's pageviews from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}
     */
    getPageviews(options?: {
        period?: TTimePeriod;
        unit?: TUnit;
        tz?: string;
        url?: string;
        referrer?: string;
        os?: string;
        browser?: string;
        device?: string;
        country?: string;
    }): Promise<IPageViews>;
    /**
     * Gets the events of the website from a specified time period
     * @param options.period The time period of events to return
     * @param options.unit The interval of time/precision of the returned events
     * @param options.tz The timezone you're in (defaults to "America/Toronto")
     * @param options.url The url where the event happened.
     * @param options.event_type The type of event to request.
     * @returns An array of events from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}
     */
    getEvents(options?: {
        period?: TTimePeriod;
        unit?: TUnit;
        tz?: string;
        url?: string;
        event_type?: string;
    }): Promise<IEvent[]>;
    /**
     * Gets the total number of events by a filter
     * @param options.filter The field to filter by
     * @param options.value The value to match the field against
     * @param options.period The time period of events to return
     * @returns The total number of events matching the filter
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}
     */
    getEventsByName(name: string, options: {
        period?: TTimePeriod;
        unit?: TUnit;
        tz?: string;
        url?: string;
        event_type?: string;
    }): Promise<IEvent[]>;
    /**
     * Gets a type of metrics of the website from a specified time period
     * @param options.period The time period of events to return
     * @param options.type The type of metric to get. Defaults to url
     * @param options.url Filter metrics by URL
     * @param options.referrer Filter metrics by referrer
     * @param options.os Filter metrics by OS
     * @param options.browser Filter metrics by browser
     * @param options.device Filter metrics by device
     * @param options.country Filter metrics by country
     * @returns An array of metrics from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}
     */
    getMetrics(options?: {
        period?: TTimePeriod;
        type?: TMetricType;
        url?: string;
        referrer?: string;
        os?: string;
        browser?: string;
        device?: string;
        country?: string;
    }): Promise<IMetric[]>;
    /**
     * Gets the active visitors of a website
     * @returns
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}
     */
    getActiveVisitors(): Promise<IActiveVisitor[]>;
}
declare class UserAccount<A extends boolean> {
    private readonly _apiClient;
    readonly user_id: number;
    username: string;
    is_admin: boolean;
    readonly created_at: string;
    updated_at: string;
    constructor(apiClient: UmamiAPIClient<A>, data: IUserAccount);
    /**
     * Updates a user account
     * @param options.username New username (admin only)
     * @param options.password New password
     * @param options.is_admin New admin status (admin only)
     * @returns The user account
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}
     */
    update(options: {
        username: string;
        password: string;
        is_admin: boolean;
    }): Promise<UserAccount<A>>;
    /**
     * Updates a user account password
     * @param options.current_password Current password
     * @param options.new_password New password
     * @returns The user account
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}
     */
    changePassword(options: {
        current_password: string;
        new_password: string;
    }): Promise<UserAccount<A>>;
    /**
     * Deletes the user account (admin only)
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}
     */
    deleteAccount(): Promise<void>;
}
/**
 * Umami API Client
 */
export default class UmamiAPIClient<A extends boolean> {
    private readonly _axios;
    private readonly _auth;
    private readonly _returnClasses;
    private _lastAuthCheck;
    private _defaultPeriod;
    private _defaultUnit;
    private _defaultTZ;
    private _defaultMetricType;
    private _defaultUserAgent;
    setDefaultPeriod(period: TTimePeriod): void;
    setDefaultUnit(unit: TUnit): void;
    setDefaultTZ(tz: string): void;
    setDefaultMetricType(metricType: TMetricType): void;
    setDefaultUserAgent(userAgent: string): void;
    getCurrentUser(): Promise<IAuthData["user"]>;
    /**
     * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.
     * @param username Username of the user you want to login
     * @param password Password of the user you want to login
     * @param returnClasses Return classes instead of plain-old JavaScript objects when getting websites or accounts.
     * @returns An authenticated class instance
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/auth/login.js Relevant Umami source code}
     */
    constructor(server: string, username: string, password: string, returnClasses: A);
    private _verifyAuth;
    /**
     * Collects a pageview
     * @param type The type of event to send
     * @param payload The payload of the pageview
     * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}
     */
    collect(type: "pageview", payload: IPageViewPayload, userAgent?: string): Promise<string>;
    /**
     * Collects an event
     * @param type The type of event to send
     * @param payload The payload of the event
     * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}
     */
    collect(type: "event", payload: IEventPayload, userAgent?: string): Promise<string>;
    /**
     * Collects a pageview
     * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.
     * @param type The type of event to send
     * @param payload The payload of the pageview
     * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}
     */
    static collect(server: string, type: "pageview", payload: IPageViewPayload, userAgent?: string): Promise<string>;
    /**
     * Collects an event
     * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.
     * @param type The type of event to send
     * @param payload The payload of the event
     * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}
     */
    static collect(server: string, type: "event", payload: IEventPayload, userAgent?: string): Promise<string>;
    /**
     * Creates a new website and returns its information.
     * @param options.domain The domain name of the website (e.g. umami.is)
     * @param options.name The name of the website (usually the same as the domain)
     * @param options.enable_share_url Whether or not to enable public sharing.
     * @returns The new website's information
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L36 Relevant Umami source code}
     */
    createWebsite(options: {
        domain: string;
        name: string;
        enable_share_url?: boolean;
    }): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;
    /**
     * Updates a website and returns its information.
     * @param website_id The website's ID (not UUID)
     * @param options.domain The domain name of the website (e.g. umami.is)
     * @param options.name The name of the website (usually the same as the domain)
     * @param options.enable_share_url Whether or not to enable public sharing.
     * @returns The website's information
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}
     */
    updateWebsite(website_id: number, options: {
        domain: string;
        name: string;
        enable_share_url?: boolean;
    }): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;
    /**
     * Gets the first website that gets returned by Umami
     * @returns The first website
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}
     */
    getWebsite(): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;
    /**
     * Gets a website by its ID (not UUID)
     * @param website_id The website's ID (not UUID)
     * @returns The website
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}
     */
    getWebsite(website_id: number): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;
    /**
     * Gets a website by a property
     * @param key The property to check
     * @param value The value to check the property against
     * @returns The website
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}
     *
     * @example
     * Get a website by domain name
     * ```ts
     * const website = await instance.getWebsiteBy("domain", "example.com");
     * ```
     */
    getWebsiteBy(key: keyof ITrackedWebsite, value: string | number): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;
    /**
     * Resets a website's stats
     * @param website_id The website's ID (not UUID)
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}
     */
    resetWebsite(website_id: number): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;
    /**
     * Deletes a website
     * @param website_id The website's ID (not UUID)
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}
     */
    deleteWebsite(website_id: number): Promise<void>;
    /**
     * Gets tracked websites
     * @param options.include_all Whether or not to include all websites (admin only)
     * @param options.user_id The user to query websites from (admin only, if not your own user id)
     * @returns An array of tracked websites
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}
     */
    getWebsites(options?: {
        include_all?: boolean;
        user_id?: number;
    }): Promise<A extends true ? TrackedWebsite<A>[] : ITrackedWebsite[]>;
    /**
     * Gets the stats of a website from a specified time period using it's ID
     * @param website_id The website's ID (not UUID)
     * @param options.period The time period of stats to return
     * @param options.url Filter stats by URL
     * @param options.referrer Filter stats by referrer
     * @param options.os Filter stats by OS
     * @param options.browser Filter stats by browser
     * @param options.device Filter stats by device
     * @param options.country Filter stats by country
     * @returns The website's stats from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}
     */
    getStats(website_id: number, options?: {
        period?: TTimePeriod;
        url?: string;
        referrer?: string;
        os?: string;
        browser?: string;
        device?: string;
        country?: string;
    }): Promise<IStats>;
    /**
     * Gets the pageviews of a website from a specified time period using it's ID
     * @param website_id The website's ID (not UUID)
     * @param options.period The time period of pageviews to return
     * @param options.unit The interval of time/precision of the returned pageviews
     * @param options.tz The timezone you're in (defaults to "America/Toronto")
     * @param options.url Filter pageviews by URL
     * @param options.referrer Filter pageviews by referrer
     * @param options.os Filter pageviews by OS
     * @param options.browser Filter pageviews by browser
     * @param options.device Filter pageviews by device
     * @param options.country Filter pageviews by country
     * @returns The website's pageviews from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}
     */
    getPageviews(website_id: number, options?: {
        period?: TTimePeriod;
        unit?: TUnit;
        tz?: string;
        url?: string;
        referrer?: string;
        os?: string;
        browser?: string;
        device?: string;
        country?: string;
    }): Promise<IPageViews>;
    /**
     * Gets the events of a website from a specified time period using it's ID
     * @param website_id The website's ID (not UUID)
     * @param options.period The time period of events to return
     * @param options.unit The interval of time/precision of the returned events
     * @param options.tz The timezone you're in (defaults to "America/Toronto")
     * @param options.url The url where the event happened.
     * @param options.event_type The type of event to request.
     * @returns An array of events from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}
     */
    getEvents(website_id: number, options?: {
        period?: TTimePeriod;
        unit?: TUnit;
        tz?: string;
        url?: string;
        event_type?: string;
    }): Promise<IEvent[]>;
    /**
     * Gets the total number of events by a filter
     * @param website_id The website's ID (not UUID)
     * @param options.filter The field to filter by
     * @param options.value The value to match the field against
     * @param options.period The time period of events to return
     * @returns The total number of events matching the filter
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}
     */
    getEventsByName(website_id: number, name: string, options: {
        period?: TTimePeriod;
        unit?: TUnit;
        tz?: string;
        url?: string;
        event_type?: string;
    }): Promise<IEvent[]>;
    /**
     * Gets a type of metrics of a website from a specified time period using it's ID
     * @param website_id The website's ID (not UUID)
     * @param options.period The time period of events to return
     * @param options.type The type of metric to get. Defaults to url
     * @param options.url Filter metrics by URL
     * @param options.referrer Filter metrics by referrer
     * @param options.os Filter metrics by OS
     * @param options.browser Filter metrics by browser
     * @param options.device Filter metrics by device
     * @param options.country Filter metrics by country
     * @returns An array of metrics from the specified time period
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}
     */
    getMetrics(website_id: number, options?: {
        period?: TTimePeriod;
        type?: TMetricType;
        url?: string;
        referrer?: string;
        os?: string;
        browser?: string;
        device?: string;
        country?: string;
    }): Promise<IMetric[]>;
    /**
     * Gets the active visitors of a website
     * @param website_id The website's ID (not UUID)
     * @returns
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}
     */
    getActiveVisitors(website_id: number): Promise<IActiveVisitor[]>;
    /*** ADMIN ONLY FUNCTIONS ***/
    /**
     * Creates a user account (admin only)
     * @param options.username The username
     * @param options.password The password
     * @returns The user account
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}
     */
    createAccount(options: {
        username: string;
        password: string;
    }): Promise<A extends true ? UserAccount<A> : IUserAccount>;
    /**
     * Updates a user account
     * @param user_id User ID to update
     * @param options.username New username (admin only)
     * @param options.password New password
     * @param options.is_admin New admin status (admin only)
     * @returns The user account
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}
     */
    updateAccount(user_id: number, options: {
        username: string;
        password: string;
        is_admin: boolean;
    }): Promise<A extends true ? UserAccount<A> : IUserAccount>;
    /**
     * Updates a user account password
     * @param user_id User ID to update
     * @param options.current_password Current password
     * @param options.new_password New password
     * @returns The user account
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}
     */
    changePassword(user_id: number, options: {
        current_password: string;
        new_password: string;
    }): Promise<A extends true ? UserAccount<A> : IUserAccount>;
    /**
     * Gets all the user accounts (admin only)
     * @returns An array of all the user accounts
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js Relevant Umami source code}
     */
    getAccounts(): Promise<A extends true ? UserAccount<A>[] : IUserAccount[]>;
    /**
     * Gets a user account (admin only)
     * @param user_id The user ID
     * @returns The user account
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}
     */
    getAccount(user_id: number): Promise<A extends true ? UserAccount<A> : IUserAccount>;
    /**
     * Deletes a user account (admin only)
     * @param user_id The user ID
     * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}
     */
    deleteAccount(user_id: number): Promise<void>;
}
export {};
