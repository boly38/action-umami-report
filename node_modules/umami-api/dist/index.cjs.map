{"version":3,"file":"index.cjs","sources":["../src/utils/time-periods.ts","../src/UmamiAPIClient.ts"],"sourcesContent":["const HOUR_PERIODS = [\"1h\", \"1hour\", \"60min\", \"60minutes\"] as const;\ntype THourPeriod = typeof HOUR_PERIODS[number];\nconst DAY_PERIODS = [\"1d\", \"1day\", \"24h\", \"24hours\"] as const;\ntype TDayPeriod = typeof DAY_PERIODS[number];\nconst WEEK_PERIODS = [\"7d\", \"7days\", \"1w\", \"1week\"] as const;\ntype TWeekPeriod = typeof WEEK_PERIODS[number];\nconst MONTH_PERIODS = [\"31d\", \"31days\", \"1m\", \"1month\"] as const;\ntype TMonthPeriod = typeof MONTH_PERIODS[number];\nexport type TTimePeriod = THourPeriod | TDayPeriod | TWeekPeriod | TMonthPeriod;\n\nexport const convertPeriodToTime = (period: TTimePeriod = \"24h\") => {\n\tlet delta: number;\n\tif (HOUR_PERIODS.includes(period as THourPeriod)) {\n\t\tdelta = 60 * 60 * 1000;\n\t} else if (DAY_PERIODS.includes(period as TDayPeriod)) {\n\t\tdelta = 24 * 60 * 60 * 1000;\n\t} else if (WEEK_PERIODS.includes(period as TWeekPeriod)) {\n\t\tdelta = 7 * 24 * 60 * 60 * 1000;\n\t} else if (MONTH_PERIODS.includes(period as TMonthPeriod)) {\n\t\tdelta = 31 * 24 * 60 * 60 * 1000;\n\t} else {\n\t\tthrow `Unexpected period provided. Accepted values are : ${[\n\t\t\t...HOUR_PERIODS,\n\t\t\t...DAY_PERIODS,\n\t\t\t...WEEK_PERIODS,\n\t\t\t...MONTH_PERIODS,\n\t\t]}`;\n\t}\n\treturn {\n\t\tstart_at: Date.now() - delta,\n\t\tend_at: Date.now(),\n\t};\n};\n","import type { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport type { TTimePeriod } from \"./utils/time-periods\";\nimport axios from \"axios\";\nimport { convertPeriodToTime } from \"./utils/time-periods\";\n\nconst DEFAULT_USER_AGENT =\n\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:102.0) Gecko/20100101 Firefox/102.0\";\n\ntype TUnit = \"year\" | \"month\" | \"day\" | \"hour\";\ntype TMetricType =\n\t| \"url\"\n\t| \"referrer\"\n\t| \"browser\"\n\t| \"os\"\n\t| \"device\"\n\t| \"country\"\n\t| \"event\"\n\t| \"language\"\n\t| \"utm_source\"\n\t| \"utm_medium\"\n\t| \"utm_campaign\"\n\t| \"utm_content\"\n\t| \"utm_term\"\n\t| \"ref\";\n\ninterface IAuthData {\n\ttoken: string;\n\tuser: {\n\t\tuser_id: number;\n\t\tusername: string;\n\t\tis_admin: boolean;\n\t\tiat?: number;\n\t};\n}\n\ninterface ITrackedWebsite {\n\twebsite_id: number;\n\twebsite_uuid: string;\n\tuser_id: number;\n\tname: string;\n\tdomain: string;\n\tshare_id: string | null;\n\tcreated_at: string;\n}\n\ninterface IStats {\n\tpageviews: { value: number; change: number };\n\tuniques: { value: number; change: number };\n\tbounces: { value: number; change: number };\n\ttotaltime: { value: number; change: number };\n}\n\ninterface IPageViews {\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of page views in the time period\n\t */\n\tpageviews: { t: string; y: number }[];\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of sessions in the time period\n\t */\n\tsessions: { t: string; y: number }[];\n}\n\n/**\n * @param x The name of the event\n * @param t The time period of the data\n * @param y The amount of events in the time period\n */\ninterface IEvent {\n\tx: string;\n\tt: string;\n\ty: number;\n}\n\n/**\n * @param x The metric's value\n * @param y The amount of this metric's value in the period of time\n */\ninterface IMetric {\n\tx: string | null;\n\ty: number;\n}\n\ninterface IActiveVisitor {\n\tx: number;\n}\n\ninterface IUserAccount {\n\tuser_id: number;\n\tusername: string;\n\tis_admin: boolean;\n\tcreated_at: string;\n\tupdated_at: string;\n}\n\ninterface IPageViewPayload {\n\twebsite: string;\n\turl: string;\n\treferrer?: string;\n\thostname: string;\n\tlanguage?: string;\n\tscreen?: string;\n}\ninterface IEventPayload extends Omit<IPageViewPayload, \"referrer\"> {\n\tevent_type: string;\n\tevent_value: string;\n}\n\nfunction _richError(message: string, cause?: any, options?: any): Error {\n\tif (!options) options = \"None specified\";\n\toptions = JSON.stringify(options);\n\n\tif (!cause) cause = \"None specified\";\n\tcause = cause.toString();\n\n\treturn new Error(`${message}\\nOptions: ${options}\\nStacktrace:`, { cause });\n}\n\nclass TrackedWebsite<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly website_id: number;\n\tpublic readonly website_uuid: string;\n\tpublic user_id: number;\n\tpublic name: string;\n\tpublic domain: string;\n\tpublic share_id: string | null;\n\tpublic created_at: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: ITrackedWebsite) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates the website.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<TrackedWebsite<A>> {\n\t\tconst data = await this._apiClient.updateWebsite(this.website_id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets the website's stats\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async reset(): Promise<TrackedWebsite<A>> {\n\t\tawait this._apiClient.resetWebsite(this.website_id);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async delete(): Promise<void> {\n\t\tawait this._apiClient.deleteWebsite(this.website_id);\n\t}\n\n\t/**\n\t * Gets the stats of the website from a specified time period\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(options?: {\n\t\tperiod?: TTimePeriod;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IStats> {\n\t\treturn await this._apiClient.getStats(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the pageviews of the website from a specified time period\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IPageViews> {\n\t\treturn await this._apiClient.getPageviews(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the events of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\tevent_type?: string;\n\t}): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEvents(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the total number of events by a filter\n\t * @param options.filter The field to filter by\n\t * @param options.value The value to match the field against\n\t * @param options.period The time period of events to return\n\t * @returns The total number of events matching the filter\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getEventsByName(\n\t\tname: string,\n\t\toptions: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEventsByName(this.website_id, name, options);\n\t}\n\n\t/**\n\t * Gets a type of metrics of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(options?: {\n\t\tperiod?: TTimePeriod;\n\t\ttype?: TMetricType;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IMetric[]> {\n\t\treturn await this._apiClient.getMetrics(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(): Promise<IActiveVisitor[]> {\n\t\treturn await this._apiClient.getActiveVisitors(this.website_id);\n\t}\n}\n\nclass UserAccount<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly user_id: number;\n\tpublic username: string;\n\tpublic is_admin: boolean;\n\tpublic readonly created_at: string;\n\tpublic updated_at: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: IUserAccount) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @param options.is_admin New admin status (admin only)\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t\tis_admin: boolean;\n\t}): Promise<UserAccount<A>> {\n\t\tconst data = await this._apiClient.updateAccount(this.user_id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(options: {\n\t\tcurrent_password: string;\n\t\tnew_password: string;\n\t}): Promise<UserAccount<A>> {\n\t\tawait this._apiClient.changePassword(this.user_id, options);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the user account (admin only)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(): Promise<void> {\n\t\tawait this._apiClient.deleteAccount(this.user_id);\n\t}\n}\n\n/**\n * Umami API Client\n */\nexport default class UmamiAPIClient<A extends boolean> {\n\tprivate readonly _axios: AxiosInstance;\n\tprivate readonly _auth: Promise<AxiosResponse<IAuthData>>;\n\tprivate readonly _returnClasses: A;\n\tprivate _lastAuthCheck: number = Date.now();\n\tprivate _defaultPeriod: TTimePeriod = \"24h\";\n\tprivate _defaultUnit: TUnit = \"hour\";\n\tprivate _defaultTZ: string = \"America/Toronto\";\n\tprivate _defaultMetricType: TMetricType = \"url\";\n\tprivate _defaultUserAgent: string = DEFAULT_USER_AGENT;\n\n\tpublic setDefaultPeriod(period: TTimePeriod): void {\n\t\tthis._defaultPeriod = period;\n\t}\n\n\tpublic setDefaultUnit(unit: TUnit): void {\n\t\tthis._defaultUnit = unit;\n\t}\n\n\tpublic setDefaultTZ(tz: string): void {\n\t\tthis._defaultTZ = tz;\n\t}\n\n\tpublic setDefaultMetricType(metricType: TMetricType): void {\n\t\tthis._defaultMetricType = metricType;\n\t}\n\n\tpublic setDefaultUserAgent(userAgent: string): void {\n\t\tthis._defaultUserAgent = userAgent;\n\t}\n\n\tpublic async getCurrentUser(): Promise<IAuthData[\"user\"]> {\n\t\treturn (await this._auth).data.user;\n\t}\n\n\t/**\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param username Username of the user you want to login\n\t * @param password Password of the user you want to login\n\t * @param returnClasses Return classes instead of plain-old JavaScript objects when getting websites or accounts.\n\t * @returns An authenticated class instance\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/auth/login.js Relevant Umami source code}\n\t */\n\tconstructor(server: string, username: string, password: string, returnClasses: A) {\n\t\tif (!server) throw new Error(\"A server hostname is required\");\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\t\tif (!username || !password) throw new Error(\"A username and a password are required\");\n\n\t\tthis._returnClasses = returnClasses;\n\n\t\tthis._axios = axios.create({\n\t\t\tbaseURL: `https://${server}/api`,\n\t\t\ttimeout: 1000,\n\t\t});\n\n\t\tthis._axios.interceptors.request.use(this._verifyAuth.bind(this));\n\n\t\tthis._auth = this._axios.post(\"/auth/login\", { username, password }).catch((error) => {\n\t\t\tthrow _richError(\"Login failed\", error, { server, username });\n\t\t});\n\t}\n\n\tprivate async _verifyAuth(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\n\t\tif (config.url == \"/auth/login\" || config.url == \"/collect\") return config;\n\n\t\tconst auth = await this._auth;\n\n\t\tconfig.headers = { ...config.headers, Authorization: `Bearer ${auth.data.token}` };\n\n\t\tif (config.url == \"/auth/verify\") return config;\n\n\t\tif (this._lastAuthCheck + 60 * 60 * 1000 < Date.now()) {\n\t\t\tthis._lastAuthCheck = Date.now();\n\n\t\t\ttry {\n\t\t\t\tawait this._axios.get(\"/auth/verify\");\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not verify authentication\", error, { axiosConfig: config });\n\t\t\t}\n\t\t}\n\n\t\treturn config;\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic async collect(\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic async collect(type: \"event\", payload: IEventPayload, userAgent?: string): Promise<string>;\n\tpublic async collect(\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = this._defaultUserAgent\n\t): Promise<string> {\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await this._axios.post(\n\t\t\t\t\"/collect\",\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"event\",\n\t\tpayload: IEventPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = DEFAULT_USER_AGENT\n\t): Promise<string> {\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t`https://${server}/api/collect`,\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new website and returns its information.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns The new website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L36 Relevant Umami source code}\n\t */\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/website\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create website\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a website and returns its information.\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns The website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}\n\t */\n\tpublic async updateWebsite(\n\t\twebsite_id: number,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\tenable_share_url?: boolean;\n\t\t}\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async updateWebsite(\n\t\twebsite_id: number,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\tenable_share_url?: boolean;\n\t\t}\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/website\", { website_id, ...options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update website\", error, { website_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the first website that gets returned by Umami\n\t * @returns The first website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\t/**\n\t * Gets a website by its ID (not UUID)\n\t * @param website_id The website's ID (not UUID)\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(\n\t\twebsite_id: number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsite(website_id: number = null): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (website_id == null) {\n\t\t\t\tconst websites = await this.getWebsites();\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, websites[0]);\n\t\t\t\t}\n\t\t\t\treturn websites[0];\n\t\t\t}\n\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a website by a property\n\t * @param key The property to check\n\t * @param value The value to check the property against\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t *\n\t * @example\n\t * Get a website by domain name\n\t * ```ts\n\t * const website = await instance.getWebsiteBy(\"domain\", \"example.com\");\n\t * ```\n\t */\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\tif (key == \"share_id\") {\n\t\t\ttry {\n\t\t\t\tconst { data } = await this._axios.get(`/share/${value}`);\n\t\t\t\tconst website = await this.getWebsite(data.websiteId);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, website);\n\t\t\t\t}\n\t\t\t\treturn website;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tif (key == \"website_id\") {\n\t\t\ttry {\n\t\t\t\tconst data = await this.getWebsite(value as number);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tconst websites = await this.getWebsites();\n\t\tconst website = websites.find((website) => website[key] == value);\n\t\tif (!website) {\n\t\t\tthrow _richError(\"Could not find website\", null, { key, value });\n\t\t}\n\t\tif (this._returnClasses) {\n\t\t\treturn new TrackedWebsite(this, website);\n\t\t}\n\t\treturn website;\n\t}\n\n\t/**\n\t * Resets a website's stats\n\t * @param website_id The website's ID (not UUID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async resetWebsite(\n\t\twebsite_id: number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async resetWebsite(website_id: number): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/website/${website_id}/reset`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not reset website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a website\n\t * @param website_id The website's ID (not UUID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async deleteWebsite(website_id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/website/${website_id}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Gets tracked websites\n\t * @param options.include_all Whether or not to include all websites (admin only)\n\t * @param options.user_id The user to query websites from (admin only, if not your own user id)\n\t * @returns An array of tracked websites\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<A extends true ? TrackedWebsite<A>[] : ITrackedWebsite[]>;\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<ITrackedWebsite[] | TrackedWebsite<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/websites\", { params: options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as ITrackedWebsite[]).map((data) => new TrackedWebsite(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get websites\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the stats of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IStats> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst params = { ...options, start_at, end_at };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/stats`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get stats\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the pageviews of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\tunit?: TUnit;\n\t\t\ttz?: string;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IPageViews> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = { ...options, start_at, end_at, unit, tz };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/pageviews`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get pageviews\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the events of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(\n\t\twebsite_id: number,\n\t\toptions?: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = {\n\t\t\tstart_at,\n\t\t\tend_at,\n\t\t\tunit,\n\t\t\ttz,\n\t\t\turl: options?.url,\n\t\t\tevent_type: options?.event_type,\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/events`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the total number of events by a filter\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.filter The field to filter by\n\t * @param options.value The value to match the field against\n\t * @param options.period The time period of events to return\n\t * @returns The total number of events matching the filter\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getEventsByName(\n\t\twebsite_id: number,\n\t\tname: string,\n\t\toptions: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\ttry {\n\t\t\tconst events = await this.getEvents(website_id, {\n\t\t\t\tperiod: options?.period,\n\t\t\t\tunit: options?.unit,\n\t\t\t\ttz: options?.tz,\n\t\t\t\turl: options?.url,\n\t\t\t\tevent_type: options?.event_type,\n\t\t\t});\n\n\t\t\treturn events.filter((event) => event.x == name);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events by name\", error, { website_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a type of metrics of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\ttype?: TMetricType;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IMetric[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst type = options?.type ?? this._defaultMetricType;\n\t\tconst params = { ...options, start_at, end_at, type };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/metrics`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get metrics\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @param website_id The website's ID (not UUID)\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(website_id: number): Promise<IActiveVisitor[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/active`);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get active visitors\", error, { website_id });\n\t\t}\n\t}\n\n\t/*** ADMIN ONLY FUNCTIONS ***/\n\n\t/**\n\t * Creates a user account (admin only)\n\t * @param options.username The username\n\t * @param options.password The password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/account\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create account\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param user_id User ID to update\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @param options.is_admin New admin status (admin only)\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async updateAccount(\n\t\tuser_id: number,\n\t\toptions: { username: string; password: string; is_admin: boolean }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async updateAccount(\n\t\tuser_id: number,\n\t\toptions: { username: string; password: string; is_admin: boolean }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/account\", { user_id, ...options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update account\", error, { user_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param user_id User ID to update\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(\n\t\tuser_id: number,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async changePassword(\n\t\tuser_id: number,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/password\", { user_id, ...options });\n\t\t\treturn this._returnClasses ? new UserAccount(this, data) : data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update password\", error, { user_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets all the user accounts (admin only)\n\t * @returns An array of all the user accounts\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js Relevant Umami source code}\n\t */\n\tpublic async getAccounts(): Promise<A extends true ? UserAccount<A>[] : IUserAccount[]>;\n\tpublic async getAccounts(): Promise<IUserAccount[] | UserAccount<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/accounts\");\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as IUserAccount[]).map((data) => new UserAccount(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get accounts\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Gets a user account (admin only)\n\t * @param user_id The user ID\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async getAccount(user_id: number): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async getAccount(user_id: number): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/account/${user_id}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get account\", error, { user_id });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a user account (admin only)\n\t * @param user_id The user ID\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(user_id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/account/${user_id}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete account\", error, { user_id });\n\t\t}\n\t}\n}\n"],"names":["DAY_PERIODS","WEEK_PERIODS","MONTH_PERIODS","convertPeriodToTime","period","delta","HOUR_PERIODS","includes","start_at","Date","now","end_at","body","recover","result","e","then","message","cause","options","JSON","stringify","toString","Error","apiClient","data","_apiClient","this","website_id","website_uuid","user_id","name","domain","share_id","created_at","Object","assign","update","_this2","Promise","resolve","updateWebsite","reset","_this4","resetWebsite","reject","_proto","deleteWebsite","getStats","getPageviews","getEvents","getEventsByName","getMetrics","getActiveVisitors","username","is_admin","updated_at","_this20","updateAccount","changePassword","_this22","deleteAccount","UmamiAPIClient","server","password","returnClasses","_axios","_auth","_returnClasses","_lastAuthCheck","_defaultPeriod","_defaultUnit","_defaultTZ","_defaultMetricType","_defaultUserAgent","DEFAULT_USER_AGENT","replace","axios","create","baseURL","timeout","interceptors","request","use","_verifyAuth","bind","post","error","_richError","setDefaultPeriod","setDefaultUnit","unit","setDefaultTZ","tz","setDefaultMetricType","metricType","setDefaultUserAgent","userAgent","getCurrentUser","_this25$_auth","user","config","url","_this28","auth","headers","_extends","Authorization","token","_temp","_catch","get","axiosConfig","_result2","collect","type","payload","_this30","_ref","_ref2","createWebsite","_this32","_ref3","TrackedWebsite","_this34","_ref4","getWebsite","_exit3","_this36","_temp3","_result3","_ref5","_temp2","getWebsites","websites","_TrackedWebsite2","getWebsiteBy","key","value","_this38","website","find","_exit5","_TrackedWebsite5","_temp9","_ref6","websiteId","_TrackedWebsite6","_exit6","_temp8","_this40","_ref7","_this42","_this44","params","_ref8","map","_options$period","_this46","_convertPeriodToTime","_ref9","_options$period2","_options$unit","_options$tz","_this48","_convertPeriodToTime2","_ref10","_options$period3","_options$unit2","_options$tz2","_this50","_convertPeriodToTime3","event_type","_this52","events","filter","event","x","_options$period4","_options$type","_this54","_convertPeriodToTime4","_ref12","_this56","_ref13","createAccount","_this58","_ref14","UserAccount","_this60","_ref15","_this62","getAccounts","_this64","_ref17","getAccount","_this66","_ref18","_this68"],"mappings":"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"}