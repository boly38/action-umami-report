{"version":3,"file":"index.cjs","sources":["../src/utils/time-periods.ts","../src/UmamiAPIClient.ts"],"sourcesContent":["const HOUR_PERIODS = [\"1h\", \"1hour\", \"60min\", \"60minutes\"] as const;\ntype THourPeriod = typeof HOUR_PERIODS[number];\nconst DAY_PERIODS = [\"1d\", \"1day\", \"24h\", \"24hours\"] as const;\ntype TDayPeriod = typeof DAY_PERIODS[number];\nconst WEEK_PERIODS = [\"7d\", \"7days\", \"1w\", \"1week\"] as const;\ntype TWeekPeriod = typeof WEEK_PERIODS[number];\nconst MONTH_PERIODS = [\"31d\", \"31days\", \"1m\", \"1month\"] as const;\ntype TMonthPeriod = typeof MONTH_PERIODS[number];\nexport type TTimePeriod = THourPeriod | TDayPeriod | TWeekPeriod | TMonthPeriod;\n\nexport const convertPeriodToTime = (period: TTimePeriod = \"24h\") => {\n\tlet delta: number;\n\tif (HOUR_PERIODS.includes(period as THourPeriod)) {\n\t\tdelta = 60 * 60 * 1000;\n\t} else if (DAY_PERIODS.includes(period as TDayPeriod)) {\n\t\tdelta = 24 * 60 * 60 * 1000;\n\t} else if (WEEK_PERIODS.includes(period as TWeekPeriod)) {\n\t\tdelta = 7 * 24 * 60 * 60 * 1000;\n\t} else if (MONTH_PERIODS.includes(period as TMonthPeriod)) {\n\t\tdelta = 31 * 24 * 60 * 60 * 1000;\n\t} else {\n\t\tthrow `Unexpected period provided. Accepted values are : ${[\n\t\t\t...HOUR_PERIODS,\n\t\t\t...DAY_PERIODS,\n\t\t\t...WEEK_PERIODS,\n\t\t\t...MONTH_PERIODS,\n\t\t]}`;\n\t}\n\treturn {\n\t\tstart_at: Date.now() - delta,\n\t\tend_at: Date.now(),\n\t};\n};\n","import type { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport type { TTimePeriod } from \"./utils/time-periods\";\nimport axios from \"axios\";\nimport { convertPeriodToTime } from \"./utils/time-periods\";\n\nconst DEFAULT_USER_AGENT =\n\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:102.0) Gecko/20100101 Firefox/102.0\";\n\ntype TUnit = \"year\" | \"month\" | \"day\" | \"hour\";\ntype TMetricType =\n\t| \"url\"\n\t| \"referrer\"\n\t| \"browser\"\n\t| \"os\"\n\t| \"device\"\n\t| \"country\"\n\t| \"event\"\n\t| \"language\"\n\t| \"utm_source\"\n\t| \"utm_medium\"\n\t| \"utm_campaign\"\n\t| \"utm_content\"\n\t| \"utm_term\"\n\t| \"ref\";\n\ninterface IAuthData {\n\ttoken: string;\n\tuser: {\n\t\tuser_id: number;\n\t\tusername: string;\n\t\tis_admin: boolean;\n\t\tiat?: number;\n\t};\n}\n\ninterface ITrackedWebsite {\n\twebsite_id: number;\n\twebsite_uuid: string;\n\tuser_id: number;\n\tname: string;\n\tdomain: string;\n\tshare_id: string | null;\n\tcreated_at: string;\n}\n\ninterface IStats {\n\tpageviews: { value: number; change: number };\n\tuniques: { value: number; change: number };\n\tbounces: { value: number; change: number };\n\ttotaltime: { value: number; change: number };\n}\n\ninterface IPageViews {\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of page views in the time period\n\t */\n\tpageviews: { t: string; y: number }[];\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of sessions in the time period\n\t */\n\tsessions: { t: string; y: number }[];\n}\n\n/**\n * @param x The name of the event\n * @param t The time period of the data\n * @param y The amount of events in the time period\n */\ninterface IEvent {\n\tx: string;\n\tt: string;\n\ty: number;\n}\n\n/**\n * @param x The metric's value\n * @param y The amount of this metric's value in the period of time\n */\ninterface IMetric {\n\tx: string | null;\n\ty: number;\n}\n\ninterface IActiveVisitor {\n\tx: number;\n}\n\ninterface IUserAccount {\n\tuser_id: number;\n\tusername: string;\n\tis_admin: boolean;\n\tcreated_at: string;\n\tupdated_at: string;\n}\n\ninterface IPageViewPayload {\n\twebsite: string;\n\turl: string;\n\treferrer?: string;\n\thostname: string;\n\tlanguage?: string;\n\tscreen?: string;\n}\ninterface IEventPayload extends Omit<IPageViewPayload, \"referrer\"> {\n\tevent_type: string;\n\tevent_value: string;\n}\n\nfunction _richError(message: string, cause?: any, options?: any): Error {\n\tif (!options) options = \"None specified\";\n\toptions = JSON.stringify(options);\n\n\tif (!cause) cause = \"None specified\";\n\tcause = cause.toString();\n\n\treturn new Error(`${message}\\nOptions: ${options}\\nStacktrace:${cause}\\n`);\n}\n\nclass TrackedWebsite<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly website_id: number;\n\tpublic readonly website_uuid: string;\n\tpublic user_id: number;\n\tpublic name: string;\n\tpublic domain: string;\n\tpublic share_id: string | null;\n\tpublic created_at: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: ITrackedWebsite) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates the website.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<TrackedWebsite<A>> {\n\t\tconst data = await this._apiClient.updateWebsite(this.website_id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets the website's stats\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async reset(): Promise<TrackedWebsite<A>> {\n\t\tawait this._apiClient.resetWebsite(this.website_id);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async delete(): Promise<void> {\n\t\tawait this._apiClient.deleteWebsite(this.website_id);\n\t}\n\n\t/**\n\t * Gets the stats of the website from a specified time period\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(options?: {\n\t\tperiod?: TTimePeriod;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IStats> {\n\t\treturn await this._apiClient.getStats(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the pageviews of the website from a specified time period\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IPageViews> {\n\t\treturn await this._apiClient.getPageviews(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the events of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\tevent_type?: string;\n\t}): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEvents(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the total number of events by a filter\n\t * @param options.filter The field to filter by\n\t * @param options.value The value to match the field against\n\t * @param options.period The time period of events to return\n\t * @returns The total number of events matching the filter\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getEventsByName(\n\t\tname: string,\n\t\toptions: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEventsByName(this.website_id, name, options);\n\t}\n\n\t/**\n\t * Gets a type of metrics of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(options?: {\n\t\tperiod?: TTimePeriod;\n\t\ttype?: TMetricType;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IMetric[]> {\n\t\treturn await this._apiClient.getMetrics(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(): Promise<IActiveVisitor[]> {\n\t\treturn await this._apiClient.getActiveVisitors(this.website_id);\n\t}\n}\n\nclass UserAccount<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly user_id: number;\n\tpublic username: string;\n\tpublic is_admin: boolean;\n\tpublic readonly created_at: string;\n\tpublic updated_at: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: IUserAccount) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @param options.is_admin New admin status (admin only)\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t\tis_admin: boolean;\n\t}): Promise<UserAccount<A>> {\n\t\tconst data = await this._apiClient.updateAccount(this.user_id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(options: {\n\t\tcurrent_password: string;\n\t\tnew_password: string;\n\t}): Promise<UserAccount<A>> {\n\t\tawait this._apiClient.changePassword(this.user_id, options);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the user account (admin only)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(): Promise<void> {\n\t\tawait this._apiClient.deleteAccount(this.user_id);\n\t}\n}\n\n/**\n * Umami API Client\n */\nexport default class UmamiAPIClient<A extends boolean> {\n\tprivate readonly _axios: AxiosInstance;\n\tprivate readonly _auth: Promise<AxiosResponse<IAuthData>>;\n\tprivate readonly _returnClasses: A;\n\tprivate _lastAuthCheck: number = Date.now();\n\tprivate _defaultPeriod: TTimePeriod = \"24h\";\n\tprivate _defaultUnit: TUnit = \"hour\";\n\tprivate _defaultTZ: string = \"America/Toronto\";\n\tprivate _defaultMetricType: TMetricType = \"url\";\n\tprivate _defaultUserAgent: string = DEFAULT_USER_AGENT;\n\n\tpublic setDefaultPeriod(period: TTimePeriod): void {\n\t\tthis._defaultPeriod = period;\n\t}\n\n\tpublic setDefaultUnit(unit: TUnit): void {\n\t\tthis._defaultUnit = unit;\n\t}\n\n\tpublic setDefaultTZ(tz: string): void {\n\t\tthis._defaultTZ = tz;\n\t}\n\n\tpublic setDefaultMetricType(metricType: TMetricType): void {\n\t\tthis._defaultMetricType = metricType;\n\t}\n\n\tpublic setDefaultUserAgent(userAgent: string): void {\n\t\tthis._defaultUserAgent = userAgent;\n\t}\n\n\tpublic async getCurrentUser(): Promise<IAuthData[\"user\"]> {\n\t\treturn (await this._auth).data.user;\n\t}\n\n\t/**\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param username Username of the user you want to login\n\t * @param password Password of the user you want to login\n\t * @param returnClasses Return classes instead of plain-old JavaScript objects when getting websites or accounts.\n\t * @returns An authenticated class instance\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/auth/login.js Relevant Umami source code}\n\t */\n\tconstructor(server: string, username: string, password: string, returnClasses: A) {\n\t\tif (!server) throw new Error(\"A server hostname is required\");\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\t\tif (!username || !password) throw new Error(\"A username and a password are required\");\n\n\t\tthis._returnClasses = returnClasses;\n\n\t\tthis._axios = axios.create({\n\t\t\tbaseURL: `https://${server}/api`,\n\t\t\ttimeout: 1000,\n\t\t});\n\n\t\tthis._axios.interceptors.request.use(this._verifyAuth.bind(this));\n\n\t\tthis._auth = this._axios.post(\"/auth/login\", { username, password }).catch((error) => {\n\t\t\tthrow _richError(\"Login failed\", error, { server, username });\n\t\t});\n\t}\n\n\tprivate async _verifyAuth(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\n\t\tif (config.url == \"/auth/login\" || config.url == \"/collect\") return config;\n\n\t\tconst auth = await this._auth;\n\n\t\tconfig.headers = { ...config.headers, Authorization: `Bearer ${auth.data.token}` };\n\n\t\tif (config.url == \"/auth/verify\") return config;\n\n\t\tif (this._lastAuthCheck + 60 * 60 * 1000 < Date.now()) {\n\t\t\tthis._lastAuthCheck = Date.now();\n\n\t\t\ttry {\n\t\t\t\tawait this._axios.get(\"/auth/verify\");\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not verify authentication\", error, { axiosConfig: config });\n\t\t\t}\n\t\t}\n\n\t\treturn config;\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic async collect(\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic async collect(type: \"event\", payload: IEventPayload, userAgent?: string): Promise<string>;\n\tpublic async collect(\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = this._defaultUserAgent\n\t): Promise<string> {\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await this._axios.post(\n\t\t\t\t\"/collect\",\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"event\",\n\t\tpayload: IEventPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = DEFAULT_USER_AGENT\n\t): Promise<string> {\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t`https://${server}/api/collect`,\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new website and returns its information.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns The new website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L36 Relevant Umami source code}\n\t */\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/website\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create website\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a website and returns its information.\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns The website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}\n\t */\n\tpublic async updateWebsite(\n\t\twebsite_id: number,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\tenable_share_url?: boolean;\n\t\t}\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async updateWebsite(\n\t\twebsite_id: number,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\tenable_share_url?: boolean;\n\t\t}\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/website\", { website_id, ...options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update website\", error, { website_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the first website that gets returned by Umami\n\t * @returns The first website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\t/**\n\t * Gets a website by its ID (not UUID)\n\t * @param website_id The website's ID (not UUID)\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(\n\t\twebsite_id: number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsite(website_id: number = null): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (website_id == null) {\n\t\t\t\tconst websites = await this.getWebsites();\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, websites[0]);\n\t\t\t\t}\n\t\t\t\treturn websites[0];\n\t\t\t}\n\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a website by a property\n\t * @param key The property to check\n\t * @param value The value to check the property against\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t *\n\t * @example\n\t * Get a website by domain name\n\t * ```ts\n\t * const website = await instance.getWebsiteBy(\"domain\", \"example.com\");\n\t * ```\n\t */\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\tif (key == \"share_id\") {\n\t\t\ttry {\n\t\t\t\tconst { data } = await this._axios.get(`/share/${value}`);\n\t\t\t\tconst website = await this.getWebsite(data.websiteId);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, website);\n\t\t\t\t}\n\t\t\t\treturn website;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tif (key == \"website_id\") {\n\t\t\ttry {\n\t\t\t\tconst data = await this.getWebsite(value as number);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tconst websites = await this.getWebsites();\n\t\tconst website = websites.find((website) => website[key] == value);\n\t\tif (!website) {\n\t\t\tthrow _richError(\"Could not find website\", null, { key, value });\n\t\t}\n\t\tif (this._returnClasses) {\n\t\t\treturn new TrackedWebsite(this, website);\n\t\t}\n\t\treturn website;\n\t}\n\n\t/**\n\t * Resets a website's stats\n\t * @param website_id The website's ID (not UUID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async resetWebsite(\n\t\twebsite_id: number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async resetWebsite(website_id: number): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/website/${website_id}/reset`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not reset website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a website\n\t * @param website_id The website's ID (not UUID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async deleteWebsite(website_id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/website/${website_id}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Gets tracked websites\n\t * @param options.include_all Whether or not to include all websites (admin only)\n\t * @param options.user_id The user to query websites from (admin only, if not your own user id)\n\t * @returns An array of tracked websites\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<A extends true ? TrackedWebsite<A>[] : ITrackedWebsite[]>;\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<ITrackedWebsite[] | TrackedWebsite<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/websites\", { params: options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as ITrackedWebsite[]).map((data) => new TrackedWebsite(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get websites\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the stats of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IStats> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst params = { ...options, start_at, end_at };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/stats`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get stats\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the pageviews of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\tunit?: TUnit;\n\t\t\ttz?: string;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IPageViews> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = { ...options, start_at, end_at, unit, tz };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/pageviews`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get pageviews\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the events of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(\n\t\twebsite_id: number,\n\t\toptions?: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = {\n\t\t\tstart_at,\n\t\t\tend_at,\n\t\t\tunit,\n\t\t\ttz,\n\t\t\turl: options?.url,\n\t\t\tevent_type: options?.event_type,\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/events`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the total number of events by a filter\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.filter The field to filter by\n\t * @param options.value The value to match the field against\n\t * @param options.period The time period of events to return\n\t * @returns The total number of events matching the filter\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getEventsByName(\n\t\twebsite_id: number,\n\t\tname: string,\n\t\toptions: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\ttry {\n\t\t\tconst events = await this.getEvents(website_id, {\n\t\t\t\tperiod: options?.period,\n\t\t\t\tunit: options?.unit,\n\t\t\t\ttz: options?.tz,\n\t\t\t\turl: options?.url,\n\t\t\t\tevent_type: options?.event_type,\n\t\t\t});\n\n\t\t\treturn events.filter((event) => event.x == name);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events by name\", error, { website_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a type of metrics of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\ttype?: TMetricType;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IMetric[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst type = options?.type ?? this._defaultMetricType;\n\t\tconst params = { ...options, start_at, end_at, type };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/metrics`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get metrics\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @param website_id The website's ID (not UUID)\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(website_id: number): Promise<IActiveVisitor[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/active`);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get active visitors\", error, { website_id });\n\t\t}\n\t}\n\n\t/*** ADMIN ONLY FUNCTIONS ***/\n\n\t/**\n\t * Creates a user account (admin only)\n\t * @param options.username The username\n\t * @param options.password The password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/account\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create account\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param user_id User ID to update\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @param options.is_admin New admin status (admin only)\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async updateAccount(\n\t\tuser_id: number,\n\t\toptions: { username: string; password: string; is_admin: boolean }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async updateAccount(\n\t\tuser_id: number,\n\t\toptions: { username: string; password: string; is_admin: boolean }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/account\", { user_id, ...options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update account\", error, { user_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param user_id User ID to update\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(\n\t\tuser_id: number,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async changePassword(\n\t\tuser_id: number,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/password\", { user_id, ...options });\n\t\t\treturn this._returnClasses ? new UserAccount(this, data) : data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update password\", error, { user_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets all the user accounts (admin only)\n\t * @returns An array of all the user accounts\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js Relevant Umami source code}\n\t */\n\tpublic async getAccounts(): Promise<A extends true ? UserAccount<A>[] : IUserAccount[]>;\n\tpublic async getAccounts(): Promise<IUserAccount[] | UserAccount<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/accounts\");\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as IUserAccount[]).map((data) => new UserAccount(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get accounts\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Gets a user account (admin only)\n\t * @param user_id The user ID\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async getAccount(user_id: number): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async getAccount(user_id: number): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/account/${user_id}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get account\", error, { user_id });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a user account (admin only)\n\t * @param user_id The user ID\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(user_id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/account/${user_id}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete account\", error, { user_id });\n\t\t}\n\t}\n}\n"],"names":["DAY_PERIODS","WEEK_PERIODS","MONTH_PERIODS","convertPeriodToTime","period","delta","HOUR_PERIODS","includes","start_at","Date","now","end_at","body","recover","result","e","then","message","cause","options","JSON","stringify","toString","Error","TrackedWebsite","apiClient","data","_apiClient","website_id","website_uuid","this","user_id","name","domain","share_id","created_at","Object","assign","UserAccount","update","_this2","updateWebsite","reset","_this4","Promise","resolve","resetWebsite","deleteWebsite","getStats","getPageviews","getEvents","getEventsByName","getMetrics","getActiveVisitors","username","is_admin","updated_at","UmamiAPIClient","_this20","updateAccount","changePassword","_this22","deleteAccount","server","password","returnClasses","_axios","_auth","_returnClasses","_lastAuthCheck","_defaultPeriod","_defaultUnit","_defaultTZ","_defaultMetricType","_defaultUserAgent","DEFAULT_USER_AGENT","replace","axios","create","baseURL","timeout","interceptors","request","use","_verifyAuth","bind","post","error","_richError","setDefaultPeriod","setDefaultUnit","unit","setDefaultTZ","tz","setDefaultMetricType","metricType","setDefaultUserAgent","userAgent","getCurrentUser","_this25$_auth","user","reject","config","_this28","url","auth","headers","Authorization","token","_temp","_catch","get","axiosConfig","collect","type","payload","_this30","_ref2","createWebsite","_this32","_this34","_ref4","getWebsite","_exit3","_this36","_temp3","_result3","_ref5","_temp2","getWebsites","websites","_TrackedWebsite2","getWebsiteBy","key","value","_exit6","_temp8","_result4","_exit5","_temp5","_result5","_this38","website","find","_temp4","_TrackedWebsite5","websiteId","_TrackedWebsite6","_temp9","_this40","_ref7","_this42","_this44","params","_ref8","map","_options$period","_this46","_convertPeriodToTime","_extends","_ref9","_options$period2","_options$unit","_options$tz","_this48","_convertPeriodToTime2","_ref10","_options$period3","_options$unit2","_options$tz2","_this50","event_type","_ref11","_this52","events","filter","event","x","_options$period4","_options$type","_this54","_convertPeriodToTime4","_ref12","_this56","_ref13","createAccount","_this58","_ref14","_this60","_ref15","_this62","getAccounts","_this64","_ref17","getAccount","_this66","_ref18","_this68"],"mappings":"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"}