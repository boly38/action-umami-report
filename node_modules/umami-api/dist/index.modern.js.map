{"version":3,"file":"index.modern.js","sources":["../src/utils/time-periods.ts","../src/UmamiAPIClient.ts"],"sourcesContent":["const HOUR_PERIODS = [\"1h\", \"1hour\", \"60min\", \"60minutes\"] as const;\ntype THourPeriod = typeof HOUR_PERIODS[number];\nconst DAY_PERIODS = [\"1d\", \"1day\", \"24h\", \"24hours\"] as const;\ntype TDayPeriod = typeof DAY_PERIODS[number];\nconst WEEK_PERIODS = [\"7d\", \"7days\", \"1w\", \"1week\"] as const;\ntype TWeekPeriod = typeof WEEK_PERIODS[number];\nconst MONTH_PERIODS = [\"31d\", \"31days\", \"1m\", \"1month\"] as const;\ntype TMonthPeriod = typeof MONTH_PERIODS[number];\nexport type TTimePeriod = THourPeriod | TDayPeriod | TWeekPeriod | TMonthPeriod;\n\nexport const convertPeriodToTime = (period: TTimePeriod = \"24h\") => {\n\tlet delta: number;\n\tif (HOUR_PERIODS.includes(period as THourPeriod)) {\n\t\tdelta = 60 * 60 * 1000;\n\t} else if (DAY_PERIODS.includes(period as TDayPeriod)) {\n\t\tdelta = 24 * 60 * 60 * 1000;\n\t} else if (WEEK_PERIODS.includes(period as TWeekPeriod)) {\n\t\tdelta = 7 * 24 * 60 * 60 * 1000;\n\t} else if (MONTH_PERIODS.includes(period as TMonthPeriod)) {\n\t\tdelta = 31 * 24 * 60 * 60 * 1000;\n\t} else {\n\t\tthrow `Unexpected period provided. Accepted values are : ${[\n\t\t\t...HOUR_PERIODS,\n\t\t\t...DAY_PERIODS,\n\t\t\t...WEEK_PERIODS,\n\t\t\t...MONTH_PERIODS,\n\t\t]}`;\n\t}\n\treturn {\n\t\tstart_at: Date.now() - delta,\n\t\tend_at: Date.now(),\n\t};\n};\n","import type { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport type { TTimePeriod } from \"./utils/time-periods\";\nimport axios from \"axios\";\nimport { convertPeriodToTime } from \"./utils/time-periods\";\n\nconst DEFAULT_USER_AGENT =\n\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:102.0) Gecko/20100101 Firefox/102.0\";\n\ntype TUnit = \"year\" | \"month\" | \"day\" | \"hour\";\ntype TMetricType =\n\t| \"url\"\n\t| \"referrer\"\n\t| \"browser\"\n\t| \"os\"\n\t| \"device\"\n\t| \"country\"\n\t| \"event\"\n\t| \"language\"\n\t| \"utm_source\"\n\t| \"utm_medium\"\n\t| \"utm_campaign\"\n\t| \"utm_content\"\n\t| \"utm_term\"\n\t| \"ref\";\n\ninterface IAuthData {\n\ttoken: string;\n\tuser: {\n\t\tuser_id: number;\n\t\tusername: string;\n\t\tis_admin: boolean;\n\t\tiat?: number;\n\t};\n}\n\ninterface ITrackedWebsite {\n\twebsite_id: number;\n\twebsite_uuid: string;\n\tuser_id: number;\n\tname: string;\n\tdomain: string;\n\tshare_id: string | null;\n\tcreated_at: string;\n}\n\ninterface IStats {\n\tpageviews: { value: number; change: number };\n\tuniques: { value: number; change: number };\n\tbounces: { value: number; change: number };\n\ttotaltime: { value: number; change: number };\n}\n\ninterface IPageViews {\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of page views in the time period\n\t */\n\tpageviews: { t: string; y: number }[];\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of sessions in the time period\n\t */\n\tsessions: { t: string; y: number }[];\n}\n\n/**\n * @param x The name of the event\n * @param t The time period of the data\n * @param y The amount of events in the time period\n */\ninterface IEvent {\n\tx: string;\n\tt: string;\n\ty: number;\n}\n\n/**\n * @param x The metric's value\n * @param y The amount of this metric's value in the period of time\n */\ninterface IMetric {\n\tx: string | null;\n\ty: number;\n}\n\ninterface IActiveVisitor {\n\tx: number;\n}\n\ninterface IUserAccount {\n\tuser_id: number;\n\tusername: string;\n\tis_admin: boolean;\n\tcreated_at: string;\n\tupdated_at: string;\n}\n\ninterface IPageViewPayload {\n\twebsite: string;\n\turl: string;\n\treferrer?: string;\n\thostname: string;\n\tlanguage?: string;\n\tscreen?: string;\n}\ninterface IEventPayload extends Omit<IPageViewPayload, \"referrer\"> {\n\tevent_type: string;\n\tevent_value: string;\n}\n\nfunction _richError(message: string, cause?: any, options?: any): Error {\n\tif (!options) options = \"None specified\";\n\toptions = JSON.stringify(options);\n\n\tif (!cause) cause = \"None specified\";\n\tcause = cause.toString();\n\n\treturn new Error(`${message}\\nOptions: ${options}\\nStacktrace:${cause}\\n`);\n}\n\nclass TrackedWebsite<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly website_id: number;\n\tpublic readonly website_uuid: string;\n\tpublic user_id: number;\n\tpublic name: string;\n\tpublic domain: string;\n\tpublic share_id: string | null;\n\tpublic created_at: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: ITrackedWebsite) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates the website.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<TrackedWebsite<A>> {\n\t\tconst data = await this._apiClient.updateWebsite(this.website_id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets the website's stats\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async reset(): Promise<TrackedWebsite<A>> {\n\t\tawait this._apiClient.resetWebsite(this.website_id);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async delete(): Promise<void> {\n\t\tawait this._apiClient.deleteWebsite(this.website_id);\n\t}\n\n\t/**\n\t * Gets the stats of the website from a specified time period\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(options?: {\n\t\tperiod?: TTimePeriod;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IStats> {\n\t\treturn await this._apiClient.getStats(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the pageviews of the website from a specified time period\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IPageViews> {\n\t\treturn await this._apiClient.getPageviews(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the events of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\tevent_type?: string;\n\t}): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEvents(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the total number of events by a filter\n\t * @param options.filter The field to filter by\n\t * @param options.value The value to match the field against\n\t * @param options.period The time period of events to return\n\t * @returns The total number of events matching the filter\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getEventsByName(\n\t\tname: string,\n\t\toptions: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEventsByName(this.website_id, name, options);\n\t}\n\n\t/**\n\t * Gets a type of metrics of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(options?: {\n\t\tperiod?: TTimePeriod;\n\t\ttype?: TMetricType;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IMetric[]> {\n\t\treturn await this._apiClient.getMetrics(this.website_id, options);\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(): Promise<IActiveVisitor[]> {\n\t\treturn await this._apiClient.getActiveVisitors(this.website_id);\n\t}\n}\n\nclass UserAccount<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly user_id: number;\n\tpublic username: string;\n\tpublic is_admin: boolean;\n\tpublic readonly created_at: string;\n\tpublic updated_at: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: IUserAccount) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @param options.is_admin New admin status (admin only)\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t\tis_admin: boolean;\n\t}): Promise<UserAccount<A>> {\n\t\tconst data = await this._apiClient.updateAccount(this.user_id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(options: {\n\t\tcurrent_password: string;\n\t\tnew_password: string;\n\t}): Promise<UserAccount<A>> {\n\t\tawait this._apiClient.changePassword(this.user_id, options);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the user account (admin only)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(): Promise<void> {\n\t\tawait this._apiClient.deleteAccount(this.user_id);\n\t}\n}\n\n/**\n * Umami API Client\n */\nexport default class UmamiAPIClient<A extends boolean> {\n\tprivate readonly _axios: AxiosInstance;\n\tprivate readonly _auth: Promise<AxiosResponse<IAuthData>>;\n\tprivate readonly _returnClasses: A;\n\tprivate _lastAuthCheck: number = Date.now();\n\tprivate _defaultPeriod: TTimePeriod = \"24h\";\n\tprivate _defaultUnit: TUnit = \"hour\";\n\tprivate _defaultTZ: string = \"America/Toronto\";\n\tprivate _defaultMetricType: TMetricType = \"url\";\n\tprivate _defaultUserAgent: string = DEFAULT_USER_AGENT;\n\n\tpublic setDefaultPeriod(period: TTimePeriod): void {\n\t\tthis._defaultPeriod = period;\n\t}\n\n\tpublic setDefaultUnit(unit: TUnit): void {\n\t\tthis._defaultUnit = unit;\n\t}\n\n\tpublic setDefaultTZ(tz: string): void {\n\t\tthis._defaultTZ = tz;\n\t}\n\n\tpublic setDefaultMetricType(metricType: TMetricType): void {\n\t\tthis._defaultMetricType = metricType;\n\t}\n\n\tpublic setDefaultUserAgent(userAgent: string): void {\n\t\tthis._defaultUserAgent = userAgent;\n\t}\n\n\tpublic async getCurrentUser(): Promise<IAuthData[\"user\"]> {\n\t\treturn (await this._auth).data.user;\n\t}\n\n\t/**\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param username Username of the user you want to login\n\t * @param password Password of the user you want to login\n\t * @param returnClasses Return classes instead of plain-old JavaScript objects when getting websites or accounts.\n\t * @returns An authenticated class instance\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/auth/login.js Relevant Umami source code}\n\t */\n\tconstructor(server: string, username: string, password: string, returnClasses: A) {\n\t\tif (!server) throw new Error(\"A server hostname is required\");\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\t\tif (!username || !password) throw new Error(\"A username and a password are required\");\n\n\t\tthis._returnClasses = returnClasses;\n\n\t\tthis._axios = axios.create({\n\t\t\tbaseURL: `https://${server}/api`,\n\t\t\ttimeout: 1000,\n\t\t});\n\n\t\tthis._axios.interceptors.request.use(this._verifyAuth.bind(this));\n\n\t\tthis._auth = this._axios.post(\"/auth/login\", { username, password }).catch((error) => {\n\t\t\tthrow _richError(\"Login failed\", error, { server, username });\n\t\t});\n\t}\n\n\tprivate async _verifyAuth(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\n\t\tif (config.url == \"/auth/login\" || config.url == \"/collect\") return config;\n\n\t\tconst auth = await this._auth;\n\n\t\tconfig.headers = { ...config.headers, Authorization: `Bearer ${auth.data.token}` };\n\n\t\tif (config.url == \"/auth/verify\") return config;\n\n\t\tif (this._lastAuthCheck + 60 * 60 * 1000 < Date.now()) {\n\t\t\tthis._lastAuthCheck = Date.now();\n\n\t\t\ttry {\n\t\t\t\tawait this._axios.get(\"/auth/verify\");\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not verify authentication\", error, { axiosConfig: config });\n\t\t\t}\n\t\t}\n\n\t\treturn config;\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic async collect(\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic async collect(type: \"event\", payload: IEventPayload, userAgent?: string): Promise<string>;\n\tpublic async collect(\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = this._defaultUserAgent\n\t): Promise<string> {\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await this._axios.post(\n\t\t\t\t\"/collect\",\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"event\",\n\t\tpayload: IEventPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = DEFAULT_USER_AGENT\n\t): Promise<string> {\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t`https://${server}/api/collect`,\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new website and returns its information.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns The new website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L36 Relevant Umami source code}\n\t */\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\tenable_share_url?: boolean;\n\t}): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/website\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create website\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a website and returns its information.\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.enable_share_url Whether or not to enable public sharing.\n\t * @returns The website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/index.js#L30 Relevant Umami source code}\n\t */\n\tpublic async updateWebsite(\n\t\twebsite_id: number,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\tenable_share_url?: boolean;\n\t\t}\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async updateWebsite(\n\t\twebsite_id: number,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\tenable_share_url?: boolean;\n\t\t}\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/website\", { website_id, ...options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update website\", error, { website_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the first website that gets returned by Umami\n\t * @returns The first website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\t/**\n\t * Gets a website by its ID (not UUID)\n\t * @param website_id The website's ID (not UUID)\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(\n\t\twebsite_id: number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsite(website_id: number = null): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (website_id == null) {\n\t\t\t\tconst websites = await this.getWebsites();\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, websites[0]);\n\t\t\t\t}\n\t\t\t\treturn websites[0];\n\t\t\t}\n\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a website by a property\n\t * @param key The property to check\n\t * @param value The value to check the property against\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t *\n\t * @example\n\t * Get a website by domain name\n\t * ```ts\n\t * const website = await instance.getWebsiteBy(\"domain\", \"example.com\");\n\t * ```\n\t */\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\tif (key == \"share_id\") {\n\t\t\ttry {\n\t\t\t\tconst { data } = await this._axios.get(`/share/${value}`);\n\t\t\t\tconst website = await this.getWebsite(data.websiteId);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, website);\n\t\t\t\t}\n\t\t\t\treturn website;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tif (key == \"website_id\") {\n\t\t\ttry {\n\t\t\t\tconst data = await this.getWebsite(value as number);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tconst websites = await this.getWebsites();\n\t\tconst website = websites.find((website) => website[key] == value);\n\t\tif (!website) {\n\t\t\tthrow _richError(\"Could not find website\", null, { key, value });\n\t\t}\n\t\tif (this._returnClasses) {\n\t\t\treturn new TrackedWebsite(this, website);\n\t\t}\n\t\treturn website;\n\t}\n\n\t/**\n\t * Resets a website's stats\n\t * @param website_id The website's ID (not UUID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async resetWebsite(\n\t\twebsite_id: number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async resetWebsite(website_id: number): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/website/${website_id}/reset`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not reset website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a website\n\t * @param website_id The website's ID (not UUID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async deleteWebsite(website_id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/website/${website_id}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete website\", error, { website_id });\n\t\t}\n\t}\n\n\t/**\n\t * Gets tracked websites\n\t * @param options.include_all Whether or not to include all websites (admin only)\n\t * @param options.user_id The user to query websites from (admin only, if not your own user id)\n\t * @returns An array of tracked websites\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<A extends true ? TrackedWebsite<A>[] : ITrackedWebsite[]>;\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<ITrackedWebsite[] | TrackedWebsite<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/websites\", { params: options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as ITrackedWebsite[]).map((data) => new TrackedWebsite(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get websites\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the stats of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IStats> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst params = { ...options, start_at, end_at };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/stats`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get stats\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the pageviews of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\tunit?: TUnit;\n\t\t\ttz?: string;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IPageViews> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = { ...options, start_at, end_at, unit, tz };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/pageviews`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get pageviews\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the events of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(\n\t\twebsite_id: number,\n\t\toptions?: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = {\n\t\t\tstart_at,\n\t\t\tend_at,\n\t\t\tunit,\n\t\t\ttz,\n\t\t\turl: options?.url,\n\t\t\tevent_type: options?.event_type,\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/events`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the total number of events by a filter\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.filter The field to filter by\n\t * @param options.value The value to match the field against\n\t * @param options.period The time period of events to return\n\t * @returns The total number of events matching the filter\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getEventsByName(\n\t\twebsite_id: number,\n\t\tname: string,\n\t\toptions: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_type?: string }\n\t): Promise<IEvent[]> {\n\t\ttry {\n\t\t\tconst events = await this.getEvents(website_id, {\n\t\t\t\tperiod: options?.period,\n\t\t\t\tunit: options?.unit,\n\t\t\t\ttz: options?.tz,\n\t\t\t\turl: options?.url,\n\t\t\t\tevent_type: options?.event_type,\n\t\t\t});\n\n\t\t\treturn events.filter((event) => event.x == name);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events by name\", error, { website_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a type of metrics of a website from a specified time period using it's ID\n\t * @param website_id The website's ID (not UUID)\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(\n\t\twebsite_id: number,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\ttype?: TMetricType;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IMetric[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst type = options?.type ?? this._defaultMetricType;\n\t\tconst params = { ...options, start_at, end_at, type };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/metrics`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get metrics\", error, { website_id, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @param website_id The website's ID (not UUID)\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(website_id: number): Promise<IActiveVisitor[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/website/${website_id}/active`);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get active visitors\", error, { website_id });\n\t\t}\n\t}\n\n\t/*** ADMIN ONLY FUNCTIONS ***/\n\n\t/**\n\t * Creates a user account (admin only)\n\t * @param options.username The username\n\t * @param options.password The password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/account\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create account\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param user_id User ID to update\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @param options.is_admin New admin status (admin only)\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/index.js Relevant Umami source code}\n\t */\n\tpublic async updateAccount(\n\t\tuser_id: number,\n\t\toptions: { username: string; password: string; is_admin: boolean }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async updateAccount(\n\t\tuser_id: number,\n\t\toptions: { username: string; password: string; is_admin: boolean }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/account\", { user_id, ...options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update account\", error, { user_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param user_id User ID to update\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(\n\t\tuser_id: number,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async changePassword(\n\t\tuser_id: number,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/password\", { user_id, ...options });\n\t\t\treturn this._returnClasses ? new UserAccount(this, data) : data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update password\", error, { user_id, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets all the user accounts (admin only)\n\t * @returns An array of all the user accounts\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js Relevant Umami source code}\n\t */\n\tpublic async getAccounts(): Promise<A extends true ? UserAccount<A>[] : IUserAccount[]>;\n\tpublic async getAccounts(): Promise<IUserAccount[] | UserAccount<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/accounts\");\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as IUserAccount[]).map((data) => new UserAccount(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get accounts\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Gets a user account (admin only)\n\t * @param user_id The user ID\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async getAccount(user_id: number): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async getAccount(user_id: number): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/account/${user_id}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get account\", error, { user_id });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a user account (admin only)\n\t * @param user_id The user ID\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/account/[id].js Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(user_id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/account/${user_id}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete account\", error, { user_id });\n\t\t}\n\t}\n}\n"],"names":["DAY_PERIODS","WEEK_PERIODS","MONTH_PERIODS","convertPeriodToTime","period","HOUR_PERIODS","includes","delta","start_at","Date","now","end_at","DEFAULT_USER_AGENT","_richError","message","cause","options","JSON","stringify","toString","TrackedWebsite","constructor","apiClient","data","_apiClient","website_id","website_uuid","user_id","name","this","domain","share_id","created_at","Object","assign","async","updateWebsite","resetWebsite","deleteWebsite","getStats","getPageviews","getEvents","getEventsByName","getMetrics","getActiveVisitors","UserAccount","username","is_admin","updated_at","updateAccount","changePassword","deleteAccount","UmamiAPIClient","setDefaultPeriod","_defaultPeriod","setDefaultUnit","unit","_defaultUnit","setDefaultTZ","tz","_defaultTZ","setDefaultMetricType","metricType","_defaultMetricType","setDefaultUserAgent","userAgent","_defaultUserAgent","_auth","user","server","password","returnClasses","_axios","_returnClasses","_lastAuthCheck","Error","replace","axios","create","baseURL","timeout","interceptors","request","use","_verifyAuth","bind","post","catch","error","config","url","headers","_extends","Authorization","auth","token","get","axiosConfig","type","payload","static","websites","getWebsites","key","value","website","getWebsite","websiteId","find","delete","params","map","_options$period","_options$period2","_options$unit","_options$tz","_options$period3","_options$unit2","_options$tz2","event_type","filter","event","x","_options$period4","_options$type"],"mappings":"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"}