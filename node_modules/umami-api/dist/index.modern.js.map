{"version":3,"file":"index.modern.js","sources":["../src/utils/time-periods.ts","../src/UmamiAPIClient.ts"],"sourcesContent":["const HOUR_PERIODS = [\"1h\", \"1hour\", \"60min\", \"60minutes\"] as const;\ntype THourPeriod = typeof HOUR_PERIODS[number];\nconst DAY_PERIODS = [\"1d\", \"1day\", \"24h\", \"24hours\"] as const;\ntype TDayPeriod = typeof DAY_PERIODS[number];\nconst WEEK_PERIODS = [\"7d\", \"7days\", \"1w\", \"1week\"] as const;\ntype TWeekPeriod = typeof WEEK_PERIODS[number];\nconst MONTH_PERIODS = [\"31d\", \"31days\", \"1m\", \"1month\"] as const;\ntype TMonthPeriod = typeof MONTH_PERIODS[number];\nexport type TTimePeriod = THourPeriod | TDayPeriod | TWeekPeriod | TMonthPeriod;\n\nexport const convertPeriodToTime = (period: TTimePeriod = \"24h\") => {\n\tlet delta: number;\n\tif (HOUR_PERIODS.includes(period as THourPeriod)) {\n\t\tdelta = 60 * 60 * 1000;\n\t} else if (DAY_PERIODS.includes(period as TDayPeriod)) {\n\t\tdelta = 24 * 60 * 60 * 1000;\n\t} else if (WEEK_PERIODS.includes(period as TWeekPeriod)) {\n\t\tdelta = 7 * 24 * 60 * 60 * 1000;\n\t} else if (MONTH_PERIODS.includes(period as TMonthPeriod)) {\n\t\tdelta = 31 * 24 * 60 * 60 * 1000;\n\t} else {\n\t\tthrow `Unexpected period provided. Accepted values are : ${[\n\t\t\t...HOUR_PERIODS,\n\t\t\t...DAY_PERIODS,\n\t\t\t...WEEK_PERIODS,\n\t\t\t...MONTH_PERIODS,\n\t\t]}`;\n\t}\n\treturn {\n\t\tstart_at: Date.now() - delta,\n\t\tend_at: Date.now(),\n\t};\n};\n","import type { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport type { TTimePeriod } from \"./utils/time-periods\";\nimport axios from \"axios\";\nimport { convertPeriodToTime } from \"./utils/time-periods\";\n\nconst DEFAULT_HTTP_CLIENT_TIMEOUT_MS = 2000;\n\nconst DEFAULT_USER_AGENT =\n\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:102.0) Gecko/20100101 Firefox/102.0\";\n\ntype TUnit = \"year\" | \"month\" | \"day\" | \"hour\";\ntype TMetricType =\n\t| \"url\"\n\t| \"referrer\"\n\t| \"browser\"\n\t| \"os\"\n\t| \"device\"\n\t| \"country\"\n\t| \"event\"\n\t| \"language\"\n\t| \"utm_source\"\n\t| \"utm_medium\"\n\t| \"utm_campaign\"\n\t| \"utm_content\"\n\t| \"utm_term\"\n\t| \"ref\";\n\ninterface IAuthData {\n\ttoken: string;\n\tuser: {\n\t\tuserId: number;\n\t\tusername: string;\n\t\tisAdmin: boolean;\n\t\taccountUuid: string;\n\t\tiat?: number;\n\t\tshareToken?: string;\n\t};\n}\n\ninterface ITrackedWebsite {\n\tid: number;\n\twebsiteUuid: string;\n\tuserId: number;\n\tname: string;\n\tdomain: string;\n\tshareId: string | null;\n\tcreatedAt: string;\n}\n\ninterface IStats {\n\tpageviews: { value: number; change: number };\n\tuniques: { value: number; change: number };\n\tbounces: { value: number; change: number };\n\ttotaltime: { value: number; change: number };\n}\n\ninterface IPageViews {\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of page views in the time period\n\t */\n\tpageviews: { t: string; y: number }[];\n\t/**\n\t * @param t The time period of the data\n\t * @param y The amount of sessions in the time period\n\t */\n\tsessions: { t: string; y: number }[];\n}\n\n/**\n * @param x The name of the event\n * @param t The time period of the data\n * @param y The amount of events in the time period\n */\ninterface IEvent {\n\tx: string;\n\tt: string;\n\ty: number;\n}\n\n/**\n * @param x The metric's value\n * @param y The amount of this metric's value in the period of time\n */\ninterface IMetric {\n\tx: string | null;\n\ty: number;\n}\n\ninterface IActiveVisitor {\n\tx: number;\n}\n\ninterface IUserAccount {\n\tid: number;\n\tusername: string;\n\tisAdmin: boolean;\n\tcreatedAt: string;\n\tupdatedAt: string;\n\taccountUuid: string;\n}\n\ninterface IPageViewPayload {\n\twebsite: string;\n\turl: string;\n\treferrer?: string;\n\thostname: string;\n\tlanguage?: string;\n\tscreen?: string;\n}\n\ninterface IEventPayload extends IPageViewPayload {\n\tevent_name: string;\n\tevent_data: string;\n}\n\nfunction _richError(message: string, cause?: any, options?: any): Error {\n\tif (!options) options = \"None specified\";\n\toptions = JSON.stringify(options);\n\n\tif (!cause) cause = \"None specified\";\n\tcause = cause.toString();\n\n\treturn new Error(`${message}\\nOptions: ${options}\\nStacktrace:${cause}\\n`);\n}\n\nclass TrackedWebsite<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly id: number;\n\tpublic readonly websiteUuid: string;\n\tpublic userId: number;\n\tpublic name: string;\n\tpublic domain: string;\n\tpublic shareId: string | null;\n\tpublic createdAt: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: ITrackedWebsite) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates the website.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.owner The website's owner's ID (by default, the logged-in's user's)\n\t * @param options.enableShareUrl Whether or not to enable public sharing.\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L23-L57 Relevant Umami source code}\n\t */\n\tpublic async update(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\towner?: number;\n\t\tenableShareUrl?: boolean;\n\t}): Promise<TrackedWebsite<A>> {\n\t\tconst data = await this._apiClient.updateWebsite(this.websiteUuid, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets the website's stats\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async reset(): Promise<TrackedWebsite<A>> {\n\t\tawait this._apiClient.resetWebsite(this.websiteUuid);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L59-L67 Relevant Umami source code}\n\t */\n\tpublic async delete(): Promise<void> {\n\t\tawait this._apiClient.deleteWebsite(this.websiteUuid);\n\t}\n\n\t/**\n\t * Gets the stats of the website from a specified time period\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(options?: {\n\t\tperiod?: TTimePeriod;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IStats> {\n\t\treturn await this._apiClient.getStats(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets the pageviews of the website from a specified time period\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IPageViews> {\n\t\treturn await this._apiClient.getPageviews(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets the events of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_type The type of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/website/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(options?: {\n\t\tperiod?: TTimePeriod;\n\t\tunit?: TUnit;\n\t\ttz?: string;\n\t\turl?: string;\n\t\tevent_type?: string;\n\t}): Promise<IEvent[]> {\n\t\treturn await this._apiClient.getEvents(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets a type of metrics of the website from a specified time period\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(options?: {\n\t\tperiod?: TTimePeriod;\n\t\ttype?: TMetricType;\n\t\turl?: string;\n\t\treferrer?: string;\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tdevice?: string;\n\t\tcountry?: string;\n\t}): Promise<IMetric[]> {\n\t\treturn await this._apiClient.getMetrics(this.websiteUuid, options);\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(): Promise<IActiveVisitor[]> {\n\t\treturn await this._apiClient.getActiveVisitors(this.websiteUuid);\n\t}\n}\n\nclass UserAccount<A extends boolean> {\n\tprivate readonly _apiClient: UmamiAPIClient<A>;\n\tpublic readonly id: number;\n\tpublic username: string;\n\tpublic isAdmin: boolean;\n\tpublic readonly createdAt: string;\n\tpublic updatedAt: string;\n\tpublic accountUuid: string;\n\n\tconstructor(apiClient: UmamiAPIClient<A>, data: IUserAccount) {\n\t\tthis._apiClient = apiClient;\n\t\tObject.assign(this, data);\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L21-L53 Relevant Umami source code}\n\t */\n\tpublic async update(options: { username: string; password: string }): Promise<UserAccount<A>> {\n\t\tconst data = await this._apiClient.updateAccount(this.id, options);\n\t\tObject.assign(this, data);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(options: {\n\t\tcurrent_password: string;\n\t\tnew_password: string;\n\t}): Promise<UserAccount<A>> {\n\t\tawait this._apiClient.changePassword(this.accountUuid, options);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the user account (admin only)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L55-L63 Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(): Promise<void> {\n\t\tawait this._apiClient.deleteAccount(this.id);\n\t}\n}\n\n/**\n * Umami API Client\n */\nexport default class UmamiAPIClient<A extends boolean> {\n\tprivate readonly _axios: AxiosInstance;\n\tprivate readonly _auth: Promise<AxiosResponse<IAuthData>>;\n\tprivate readonly _returnClasses: A;\n\tprivate _lastAuthCheck: number = Date.now();\n\tprivate _defaultPeriod: TTimePeriod = \"24h\";\n\tprivate _defaultUnit: TUnit = \"hour\";\n\tprivate _defaultTZ = \"America/Toronto\";\n\tprivate _defaultMetricType: TMetricType = \"url\";\n\tprivate _defaultUserAgent: string = DEFAULT_USER_AGENT;\n\n\tpublic setDefaultPeriod(period: TTimePeriod): void {\n\t\tthis._defaultPeriod = period;\n\t}\n\n\tpublic setDefaultUnit(unit: TUnit): void {\n\t\tthis._defaultUnit = unit;\n\t}\n\n\tpublic setDefaultTZ(tz: string): void {\n\t\tthis._defaultTZ = tz;\n\t}\n\n\tpublic setDefaultMetricType(metricType: TMetricType): void {\n\t\tthis._defaultMetricType = metricType;\n\t}\n\n\tpublic setDefaultUserAgent(userAgent: string): void {\n\t\tthis._defaultUserAgent = userAgent;\n\t}\n\n\tpublic async getCurrentUser(): Promise<IAuthData[\"user\"]> {\n\t\treturn (await this._auth).data.user;\n\t}\n\n\t/**\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param username Username of the user you want to login\n\t * @param password Password of the user you want to login\n\t * @param returnClasses Return classes instead of plain-old JavaScript objects when getting websites or accounts.\n\t * @returns An authenticated class instance\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/auth/login.js Relevant Umami source code}\n\t */\n\tconstructor(server: string, username: string, password: string, returnClasses: A) {\n\t\tif (!server) throw new Error(\"A server hostname is required\");\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\t\tif (!username || !password) throw new Error(\"A username and a password are required\");\n\n\t\tthis._returnClasses = returnClasses;\n\t\tthis._axios = axios.create({\n\t\t\tbaseURL: `https://${server}/api`,\n\t\t\ttimeout: this.getClientTimeoutMs(),\n\t\t});\n\n\t\tthis._axios.interceptors.request.use(this._verifyAuth.bind(this));\n\n\t\tthis._auth = this._axios.post(\"/auth/login\", { username, password }).catch((error) => {\n\t\t\tthrow _richError(\"Login failed\", error, { server, username });\n\t\t});\n\t}\n\n\tprivate getClientTimeoutMs() {\n\t\tconst timeout: number = parseInt(\n\t\t\tprocess.env.UMAMI_CLIENT_TIMEOUT_MS || DEFAULT_HTTP_CLIENT_TIMEOUT_MS.toString()\n\t\t);\n\t\treturn timeout < 100 || timeout > 60000 ? DEFAULT_HTTP_CLIENT_TIMEOUT_MS : timeout;\n\t}\n\n\tprivate async _verifyAuth(config: AxiosRequestConfig): Promise<AxiosRequestConfig> {\n\t\tif (config.url == \"/auth/login\" || config.url == \"/collect\") return config;\n\n\t\tconst auth = await this._auth;\n\n\t\tconfig.headers = { ...config.headers, Authorization: `Bearer ${auth.data.token}` };\n\n\t\tif (config.url == \"/auth/verify\") return config;\n\n\t\tif (this._lastAuthCheck + 60 * 60 * 1000 < Date.now()) {\n\t\t\tthis._lastAuthCheck = Date.now();\n\n\t\t\ttry {\n\t\t\t\tawait this._axios.get(\"/auth/verify\");\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not verify authentication\", error, { axiosConfig: config });\n\t\t\t}\n\t\t}\n\n\t\treturn config;\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic async collect(\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic async collect(type: \"event\", payload: IEventPayload, userAgent?: string): Promise<string>;\n\tpublic async collect(\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = this._defaultUserAgent\n\t): Promise<string> {\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await this._axios.post(\n\t\t\t\t\"/collect\",\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Collects a pageview\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the pageview\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L75 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\",\n\t\tpayload: IPageViewPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\t/**\n\t * Collects an event\n\t * @param server The Umami installation hostname (e.g. app.umami.is). The protocol, if present, will be removed.\n\t * @param type The type of event to send\n\t * @param payload The payload of the event\n\t * @param userAgent Value of the User-Agent header. Necessary for platform detection. Defaults to Firefox on Mac OS on a laptop\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/collect.js#L77 Relevant Umami source code}\n\t */\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"event\",\n\t\tpayload: IEventPayload,\n\t\tuserAgent?: string\n\t): Promise<string>;\n\tpublic static async collect(\n\t\tserver: string,\n\t\ttype: \"pageview\" | \"event\",\n\t\tpayload: IEventPayload | IPageViewPayload,\n\t\tuserAgent: string = DEFAULT_USER_AGENT\n\t): Promise<string> {\n\t\tserver = server.replace(/https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n\n\t\ttry {\n\t\t\tif (!userAgent) throw new Error(\"A user agent is required. See https://umami.is/docs/api\");\n\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t`https://${server}/api/collect`,\n\t\t\t\t{ type, payload },\n\t\t\t\t{ headers: { \"User-Agent\": userAgent } }\n\t\t\t);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not collect\", error, { type, payload, userAgent });\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new website and returns its information.\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.owner The website's owner's ID (by default, the logged-in's user's)\n\t * @param options.enableShareUrl Whether or not to enable public sharing.\n\t * @returns The new website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js#L33-L47 Relevant Umami source code}\n\t */\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\towner?: number;\n\t\tenableShareUrl?: boolean;\n\t}): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async createWebsite(options: {\n\t\tdomain: string;\n\t\tname: string;\n\t\towner?: number;\n\t\tenableShareUrl?: boolean;\n\t}): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (!options.owner) {\n\t\t\t\tconst currentUser = await this.getCurrentUser();\n\t\t\t\toptions = {\n\t\t\t\t\t...options,\n\t\t\t\t\towner: currentUser.userId,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst { data } = await this._axios.post(\"/websites\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create website\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a website and returns its information.\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.domain The domain name of the website (e.g. umami.is)\n\t * @param options.name The name of the website (usually the same as the domain)\n\t * @param options.owner The website's owner's ID (by default, the logged-in's user's)\n\t * @param options.enableShareUrl Whether or not to enable public sharing.\n\t * @returns The website's information\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L23-L57 Relevant Umami source code}\n\t */\n\tpublic async updateWebsite(\n\t\twebsiteUuid: string,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\towner?: number;\n\t\t\tenableShareUrl?: boolean;\n\t\t}\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async updateWebsite(\n\t\twebsiteUuid: string,\n\t\toptions: {\n\t\t\tdomain: string;\n\t\t\tname: string;\n\t\t\towner?: number;\n\t\t\tenableShareUrl?: boolean;\n\t\t}\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (!options.owner) {\n\t\t\t\tconst currentUser = await this.getCurrentUser();\n\t\t\t\toptions = {\n\t\t\t\t\t...options,\n\t\t\t\t\towner: currentUser.userId,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst { data } = await this._axios.post(`/websites/${websiteUuid}`, options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update website\", error, { websiteUuid, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the first website that gets returned by Umami\n\t * @returns The first website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\t/**\n\t * Gets a website by its UUID (not ID)\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js Relevant Umami source code}\n\t */\n\tpublic async getWebsite(\n\t\twebsiteUuid: string\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsite(\n\t\twebsiteUuid: string = null\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tif (websiteUuid == null) {\n\t\t\t\tconst websites = await this.getWebsites();\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, websites[0]);\n\t\t\t\t}\n\t\t\t\treturn websites[0];\n\t\t\t}\n\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get website\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a website by a property\n\t * @param key The property to check\n\t * @param value The value to check the property against\n\t * @returns The website\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js Relevant Umami source code}\n\t *\n\t * @example\n\t * Get a website by domain name\n\t * ```ts\n\t * const website = await instance.getWebsiteBy(\"domain\", \"example.com\");\n\t * ```\n\t */\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async getWebsiteBy(\n\t\tkey: keyof ITrackedWebsite,\n\t\tvalue: string | number\n\t): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\tif (key == \"shareId\") {\n\t\t\ttry {\n\t\t\t\tconst { data } = await this._axios.get(`/share/${value}`);\n\t\t\t\tconst website = await this.getWebsite(data.websiteId);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, website);\n\t\t\t\t}\n\t\t\t\treturn website;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tif (key == \"websiteUuid\") {\n\t\t\ttry {\n\t\t\t\tconst data = await this.getWebsite(value as string);\n\t\t\t\tif (this._returnClasses) {\n\t\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t} catch (error) {\n\t\t\t\tthrow _richError(\"Could not find website\", error, { key, value });\n\t\t\t}\n\t\t}\n\n\t\tconst websites = await this.getWebsites();\n\t\tconst website = websites.find((website) => website[key] == value);\n\t\tif (!website) {\n\t\t\tthrow _richError(\"Could not find website\", null, { key, value });\n\t\t}\n\t\tif (this._returnClasses) {\n\t\t\treturn new TrackedWebsite(this, website);\n\t\t}\n\t\treturn website;\n\t}\n\n\t/**\n\t * Resets a website's stats\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/reset.js Relevant Umami source code}\n\t */\n\tpublic async resetWebsite(\n\t\twebsiteUuid: string\n\t): Promise<A extends true ? TrackedWebsite<A> : ITrackedWebsite>;\n\tpublic async resetWebsite(websiteUuid: string): Promise<ITrackedWebsite | TrackedWebsite<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/websites/${websiteUuid}/reset`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new TrackedWebsite(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not reset website\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a website\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/index.js#L59-L67 Relevant Umami source code}\n\t */\n\tpublic async deleteWebsite(websiteUuid: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/websites/${websiteUuid}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete website\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/**\n\t * Gets tracked websites\n\t * @param options.include_all Whether or not to include all websites (admin only)\n\t * @param options.user_id The user to query websites from (admin only, if not your own user id)\n\t * @returns An array of tracked websites\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/index.js#L20-L31 Relevant Umami source code}\n\t */\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<A extends true ? TrackedWebsite<A>[] : ITrackedWebsite[]>;\n\tpublic async getWebsites(options?: {\n\t\tinclude_all?: boolean;\n\t\tuser_id?: number;\n\t}): Promise<ITrackedWebsite[] | TrackedWebsite<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/websites\", { params: options });\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as ITrackedWebsite[]).map((data) => new TrackedWebsite(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get websites\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the stats of a website from a specified time period using it's ID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of stats to return\n\t * @param options.url Filter stats by URL\n\t * @param options.referrer Filter stats by referrer\n\t * @param options.os Filter stats by OS\n\t * @param options.browser Filter stats by browser\n\t * @param options.device Filter stats by device\n\t * @param options.country Filter stats by country\n\t * @returns The website's stats from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/stats.js Relevant Umami source code}\n\t */\n\tpublic async getStats(\n\t\twebsiteUuid: string,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IStats> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst params = { ...options, start_at, end_at };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/stats`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get stats\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the pageviews of a website from a specified time period using it's ID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of pageviews to return\n\t * @param options.unit The interval of time/precision of the returned pageviews\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url Filter pageviews by URL\n\t * @param options.referrer Filter pageviews by referrer\n\t * @param options.os Filter pageviews by OS\n\t * @param options.browser Filter pageviews by browser\n\t * @param options.device Filter pageviews by device\n\t * @param options.country Filter pageviews by country\n\t * @returns The website's pageviews from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/pageviews.js Relevant Umami source code}\n\t */\n\tpublic async getPageviews(\n\t\twebsiteUuid: string,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\tunit?: TUnit;\n\t\t\ttz?: string;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IPageViews> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = { ...options, start_at, end_at, unit, tz };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/pageviews`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get pageviews\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the events of a website from a specified time period using it's UUID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of events to return\n\t * @param options.unit The interval of time/precision of the returned events\n\t * @param options.tz The timezone you're in (defaults to \"America/Toronto\")\n\t * @param options.url The url where the event happened.\n\t * @param options.event_name The name of event to request.\n\t * @returns An array of events from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/events.js Relevant Umami source code}\n\t */\n\tpublic async getEvents(\n\t\twebsiteUuid: string,\n\t\toptions?: { period?: TTimePeriod; unit?: TUnit; tz?: string; url?: string; event_name?: string }\n\t): Promise<IEvent[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst unit = options?.unit ?? this._defaultUnit;\n\t\tconst tz = options?.tz ?? this._defaultTZ;\n\t\tconst params = {\n\t\t\tstart_at,\n\t\t\tend_at,\n\t\t\tunit,\n\t\t\ttz,\n\t\t\turl: options?.url,\n\t\t\tevent_name: options?.event_name,\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/events`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get events\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets a type of metrics of a website from a specified time period using it's ID\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @param options.period The time period of events to return\n\t * @param options.type The type of metric to get. Defaults to url\n\t * @param options.url Filter metrics by URL\n\t * @param options.referrer Filter metrics by referrer\n\t * @param options.os Filter metrics by OS\n\t * @param options.browser Filter metrics by browser\n\t * @param options.device Filter metrics by device\n\t * @param options.country Filter metrics by country\n\t * @returns An array of metrics from the specified time period\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/metrics.js Relevant Umami source code}\n\t */\n\tpublic async getMetrics(\n\t\twebsiteUuid: string,\n\t\toptions?: {\n\t\t\tperiod?: TTimePeriod;\n\t\t\ttype?: TMetricType;\n\t\t\turl?: string;\n\t\t\treferrer?: string;\n\t\t\tos?: string;\n\t\t\tbrowser?: string;\n\t\t\tdevice?: string;\n\t\t\tcountry?: string;\n\t\t}\n\t): Promise<IMetric[]> {\n\t\tconst { start_at, end_at } = convertPeriodToTime(options?.period ?? this._defaultPeriod);\n\t\tconst type = options?.type ?? this._defaultMetricType;\n\t\tconst params = { ...options, start_at, end_at, type };\n\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/metrics`, { params });\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get metrics\", error, { websiteUuid, params });\n\t\t}\n\t}\n\n\t/**\n\t * Gets the active visitors of a website\n\t * @param websiteUuid The website's UUID (not ID)\n\t * @returns\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/websites/[id]/active.js Relevant Umami source code}\n\t */\n\tpublic async getActiveVisitors(websiteUuid: string): Promise<IActiveVisitor[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/websites/${websiteUuid}/active`);\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get active visitors\", error, { websiteUuid });\n\t\t}\n\t}\n\n\t/*** ADMIN ONLY FUNCTIONS ***/\n\n\t/**\n\t * Creates a user account (admin only)\n\t * @param options.username The username\n\t * @param options.password The password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js#L21-L37 Relevant Umami source code}\n\t */\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async createAccount(options: {\n\t\tusername: string;\n\t\tpassword: string;\n\t}): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(\"/accounts\", options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not create account\", error, { options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account\n\t * @param userId User ID to update\n\t * @param options.username New username (admin only)\n\t * @param options.password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L21-L53 Relevant Umami source code}\n\t */\n\tpublic async updateAccount(\n\t\tuserId: number,\n\t\toptions: { username: string; password: string }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async updateAccount(\n\t\tuserId: number,\n\t\toptions: { username: string; password: string }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/accounts/${userId}`, options);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update account\", error, { userId, options });\n\t\t}\n\t}\n\n\t/**\n\t * Updates a user account password\n\t * @param accountUuid User UUID to update\n\t * @param options.current_password Current password\n\t * @param options.new_password New password\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/password.js Relevant Umami source code}\n\t */\n\tpublic async changePassword(\n\t\taccountUuid: string,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async changePassword(\n\t\taccountUuid: string,\n\t\toptions: { current_password: string; new_password: string }\n\t): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.post(`/accounts/${accountUuid}/password`, options);\n\t\t\treturn this._returnClasses ? new UserAccount(this, data) : data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not update password\", error, { accountUuid, options });\n\t\t}\n\t}\n\n\t/**\n\t * Gets all the user accounts (admin only)\n\t * @returns An array of all the user accounts\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/index.js#L15-L19 Relevant Umami source code}\n\t */\n\tpublic async getAccounts(): Promise<A extends true ? UserAccount<A>[] : IUserAccount[]>;\n\tpublic async getAccounts(): Promise<IUserAccount[] | UserAccount<A>[]> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(\"/accounts\");\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn (data as IUserAccount[]).map((data) => new UserAccount(this, data));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get accounts\", error);\n\t\t}\n\t}\n\n\t/**\n\t * Gets a user account (admin only)\n\t * @param userId The user ID\n\t * @returns The user account\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L11-L19 Relevant Umami source code}\n\t */\n\tpublic async getAccount(userId: number): Promise<A extends true ? UserAccount<A> : IUserAccount>;\n\tpublic async getAccount(userId: number): Promise<IUserAccount | UserAccount<A>> {\n\t\ttry {\n\t\t\tconst { data } = await this._axios.get(`/accounts/${userId}`);\n\t\t\tif (this._returnClasses) {\n\t\t\t\treturn new UserAccount(this, data);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not get account\", error, { userId });\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a user account (admin only)\n\t * @param userId The user ID\n\t * @see {@link https://github.com/umami-software/umami/blob/master/pages/api/accounts/[id]/index.js#L55-L63 Relevant Umami source code}\n\t */\n\tpublic async deleteAccount(userId: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._axios.delete(`/accounts/${userId}`);\n\t\t} catch (error) {\n\t\t\tthrow _richError(\"Could not delete account\", error, { userId });\n\t\t}\n\t}\n}\n"],"names":["DAY_PERIODS","MONTH_PERIODS","convertPeriodToTime","period","delta","HOUR_PERIODS","includes","WEEK_PERIODS","start_at","Date","now","end_at","DEFAULT_USER_AGENT","_richError","message","cause","options","JSON","stringify","toString","Error","TrackedWebsite","constructor","apiClient","data","_apiClient","id","this","websiteUuid","userId","name","domain","shareId","createdAt","Object","assign","async","updateWebsite","resetWebsite","deleteWebsite","getStats","getPageviews","getEvents","getMetrics","getActiveVisitors","UserAccount","username","isAdmin","updatedAt","accountUuid","updateAccount","changePassword","deleteAccount","UmamiAPIClient","setDefaultPeriod","_defaultPeriod","setDefaultUnit","unit","_defaultUnit","setDefaultTZ","tz","_defaultTZ","setDefaultMetricType","metricType","_defaultMetricType","setDefaultUserAgent","userAgent","_defaultUserAgent","_auth","user","server","password","returnClasses","_axios","_returnClasses","_lastAuthCheck","replace","axios","create","baseURL","timeout","getClientTimeoutMs","interceptors","request","use","_verifyAuth","bind","post","catch","error","parseInt","process","env","UMAMI_CLIENT_TIMEOUT_MS","config","url","auth","headers","Authorization","token","get","axiosConfig","type","payload","static","owner","_extends","getCurrentUser","websites","getWebsites","key","value","website","getWebsite","websiteId","find","delete","params","map","_options$period","_options$period2","_options$unit","_options$tz","_options$period3","_options$unit2","_options$tz2","event_name","_options$period4","_options$type"],"mappings":"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"}